import formats/json/json;
import ds/tree;

export {
	// Finds identical json objects and arrays and attempt to reuse those to save memory
	compactJson(j : Json) -> Json;
}

compactJson(j : Json) -> Json {
	doCompactJson(j, makeTree());
}

doCompactJson(j : Json, existing : Tree<Json, Json>) -> Json {
	switch (j) {
		JsonObject(members): {
			mexist = lookupTree(existing, j);
			mexist ?? {
				mexist
			} : {
				nexist = setTree(existing, j, j);
				JsonObject(
					map(members, \m -> {
						Pair(m.first, doCompactJson(m.second, nexist))
					})
				)
			}
		}
		JsonArray(value): {
			mexist = lookupTree(existing, j);
			mexist ?? {
				mexist
			} : {
				nexist = setTree(existing, j, j);
				JsonArray(
					map(value, \m -> {
						doCompactJson(m, nexist)
					})
				)
			}
		}
		JsonNull(): j;
		JsonBool(v): j;
		JsonString(s): j;
		JsonDouble(value): j;
	}
}
