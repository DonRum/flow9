import tropic/tropic_gui;

export {
	// Makes tropic metrics constant (or only width or height)
	// Useful in situations when you know that tropic doesn't change in size but has dynamic forms inside
	makeTropicConstant(width : Maybe<double>, height : Maybe<double>) -> (Tropic) -> Tropic;
	makeTropicConstantWidth(width : Maybe<double>) -> (Tropic) -> Tropic;
	makeTropicConstantHeight(height : Maybe<double>) -> (Tropic) -> Tropic;
	// Same as functions above, only takes defWidth or defHeight if corresponding metrics of t : Tropic are zero.
	makeTropicConstantDef(defWidth : double, defHeight : double) -> (Tropic) -> Tropic;
	makeTropicConstantWidthDef(defWidth : double) -> (Tropic) -> Tropic;
	makeTropicConstantHeightDef(defHeight : double) -> (Tropic) -> Tropic;
	// Makes width or height constant if they are > 0;
	makeTropicConstant2(width : double, height : double) -> (Tropic) -> Tropic;

	tropicConstantEnabled = ref true;
}

makeTropicConstant(width : Maybe<double>, height : Maybe<double>) -> (Tropic) -> Tropic {
	makeTropicConstantWidth(width)
	|> (\fn -> \t -> fn(t) |> makeTropicConstantHeight(height))
}

makeTropicConstantDef(defWidth : double, defHeight : double) -> (Tropic) -> Tropic {
	makeTropicConstantWidthDef(defWidth)
	|> (\fn -> \t -> fn(t) |> makeTropicConstantHeightDef(defHeight))
}

makeTropicConstantWidth(width : Maybe<double>) -> (Tropic) -> Tropic {
	if (^tropicConstantEnabled && isSome(width))
		\t -> TransformTAcc(\t2a, pi, ss, mo -> {
			bf = t2a(t, pi, ss, mo);
			wd =
				eitherFn(
					width,
					\wd ->
						if (wd >= 0.)
							const(wd)
						else
							bf.metrics.width,
					\ ->
						bf.metrics.width |> fgetValue |> const
				);
			xConst = either(width, 0.) >= 0.;

			TAcc(
				bf.form,
				TFormMetrics(
					wd,
					bf.metrics.height,
					bf.metrics.baseline
				),
				if (xConst) wd else bf.minWidth,
				bf.minHeight,
				if (xConst) wd else bf.maxWidth,
				bf.maxHeight,
				if (xConst) zero else bf.xFillers,
				bf.yFillers,
				bf.addFillers,
				xConst,
				bf.yConstant,
				bf.disposers
			)
		})
	else
		idfn
}

makeTropicConstantWidthDef(defWidth : double) -> (Tropic) -> Tropic {
	if (^tropicConstantEnabled && defWidth > 0.0)
		\t -> TransformTAcc2(\t2a -> {
			bf = t |> t2a;
			wd = if (bf.xConstant) bf.metrics.width |> fgetValue |> (\wd -> if (wd > 0.) wd else defWidth) |> const else bf.metrics.width;

			TAcc(
				bf.form,
				TFormMetrics(
					wd,
					bf.metrics.height,
					bf.metrics.baseline
				),
				wd,
				bf.minHeight,
				wd,
				bf.maxHeight,
				zero,
				bf.yFillers,
				bf.addFillers,
				bf.xConstant,
				bf.yConstant,
				bf.disposers
			)
		})
	else
		idfn
}

makeTropicConstantHeight(height : Maybe<double>) -> (Tropic) -> Tropic {
	if (^tropicConstantEnabled && isSome(height))
		\t -> TransformTAcc(\t2a, pi, ss, mo -> {
			bf = t2a(t, pi, ss, mo);
			hgt =
				eitherFn(
					height,
					\hgt ->
						if (hgt >= 0.)
							const(hgt)
						else
							bf.metrics.height,
					\ ->
						bf.metrics.height |> fgetValue |> const
				);
			yConst = either(height, 0.) >= 0.;

			TAcc(
				bf.form,
				TFormMetrics(
					bf.metrics.width,
					hgt,
					bf.metrics.baseline |> fgetValue |> const
				),
				bf.minWidth,
				if (yConst) hgt else bf.minHeight,
				bf.maxWidth,
				if (yConst) hgt else bf.maxHeight,
				bf.xFillers,
				if (yConst) zero else bf.yFillers,
				bf.addFillers,
				bf.xConstant,
				yConst,
				bf.disposers
			)
		})
	else
		idfn
}

makeTropicConstantHeightDef(defHeight : double) -> (Tropic) -> Tropic {
	if (^tropicConstantEnabled && defHeight > 0.0)
		\t -> TransformTAcc2(\t2a -> {
			bf = t |> t2a;
			hgt = if (bf.yConstant) bf.metrics.height |> fgetValue |> (\hgt -> if (hgt > 0.) hgt else defHeight) |> const else bf.metrics.height;

			TAcc(
				bf.form,
				TFormMetrics(
					bf.metrics.width,
					hgt,
					if (bf.yConstant) bf.metrics.baseline |> fgetValue |> const else bf.metrics.baseline
				),
				bf.minWidth,
				hgt,
				bf.maxWidth,
				hgt,
				bf.xFillers,
				zero,
				bf.addFillers,
				bf.xConstant,
				bf.yConstant,
				bf.disposers
			)
		})
	else
		idfn
}

makeTropicConstant2(width : double, height : double) -> (Tropic) -> Tropic {
	if (^tropicConstantEnabled)
		\t ->
			if (width > 0. && height > 0.)
				makeTropicConstant(Some(width), Some(height))(t)
			else if (width > 0.)
				makeTropicConstantWidth(Some(width))(t)
			else if (height > 0.)
				makeTropicConstantHeight(Some(height))(t)
			else
				t
	else
		idfn
}