// Â© Copyright 2014 Area9 Technologies.

import tropic/tropic;
import ds/array_diff;
import algorithms;

export {
	// Monitors an array of Tropics and presents them relatively efficiently on the screen - only changed elements in the array are
	// updated on the screen

	SelectTLines(values : Transform<[?]>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic) -> Tropic;
	SelectTCols(values : Transform<[?]>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic) -> Tropic;
	SelectTColsA(values : Transform<[?]>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic) -> Tropic;
	SelectTGroup(values : Transform<[?]>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic) -> Tropic;
}

SelectTLines(values : Transform<[?]>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic) -> Tropic {
	SelectTropicArray(values, makeTropicFn, TLinesCombiner());
}

SelectTCols(values : Transform<[?]>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic) -> Tropic {
	SelectTropicArray(values, makeTropicFn, TColsCombiner());
}

SelectTColsA(values : Transform<[?]>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic) -> Tropic {
	SelectTropicArray(values, makeTropicFn, TColsACombiner());
}

SelectTGroup(values : Transform<[?]>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic) -> Tropic {
	SelectTropicArray(values, makeTropicFn, TGroupCombiner());
}

SelectTropicArray(values : Transform<[?]>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic, combiner : TCombiner) -> Tropic {
	stackChanges = make([]);
	old = ref [];
	indexes : ref [DynamicBehaviour<int>] = ref [];
	ids : ref [int] = ref [];

	getNextId = \ -> fold(sort(^ids), -1, \acc, id -> if (id == acc + 1) id else acc) + 1;

	TConstruct(
		[
			makeSubscribe(values, \l -> {
				next(
					stackChanges,
					concat(
						getValue(stackChanges),
						filtermap(arrayDiffSimple(^old, l, true), \op ->
							switch (op) {
								ArrayInsertSimple(x, v): {
									index = make(x);
									id = getNextId();

									indexes := insertArray(^indexes, x, index);
									ids := insertArray(^ids, x, id);

									// fselect to block any changes to index
									cast(Some(TGroupAdd(makeTropicFn(fselect(index, idfn |> FLift), id, v), x)) : Some<TGroupAdd> -> Maybe<TGroupChange>);
								}
								ArrayMoveSimple(x, y): {
									indexes := moveElement(^indexes, x, y);
									ids := moveElement(^ids, x, y);

									nextDistinct(^indexes[y], y);

									Some(TGroupMove(x, y));
								}
								ArrayRemoveSimple(x): {
									indexes := removeIndex(^indexes, x);
									ids := removeIndex(^ids, x);

									Some(TGroupDelete(x));
								}
								ArrayNopSimple(x, y): {
									nextDistinct(^indexes[y], y);

									None();
								}
							}
						)
					)
				);

				old := l;
			})
		],
		TDynamicGroup2(
			stackChanges,
			ref [],
			combiner
		)
	)
}