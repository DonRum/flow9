import material/internal/material_shadow;
import material/internal/material_component;

export {
	MSurface2T(manager : MaterialManager, parent : MFocusGroup, m : MSurface, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic;
}

MSurfaceStyle2TGraphicsStyle(style : [MSurfaceStyle]) -> [TGraphicsStyle] {
	filtermap(style, \st -> {
		switch (st : MSurfaceStyle) {
			TGraphicsStyle(): Some(st);
			default: None();
		}
	})
}

MSurface2T(manager : MaterialManager, parent : MFocusGroup, m : MSurface, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	component = extractStruct(m.style, MComponentName("MSurface")).name;
	elevation = extractStruct(m.style, MElevation(const(1.0))).elevation;
	clickElevation = extractStruct(m.style, MClickElevation(const(8.0))).elevation;
	hoverElevation = extractStruct(m.style, MHoverElevation(const(4.0))).elevation;
	color = extractMColor(parent, m.style, MSurfaceColor());
	graphicsStyle = MSurfaceStyle2TGraphicsStyle(concat([MFill(color)], m.style));
	margin = extractStruct(m.style, MMargin(0.0, 0.0, 0.0, 0.0));
	padding = extractStruct(m.style, MPadding(8.0, 8.0, 8.0, 8.0));
	textColor = getTextColorWithBackground(parent, graphicsStyle);

	isClickable = length(MFocusClicks(m.style).mouseOnDownState) > 0 || isSome(tryExtractStruct(m.style, MGetFocus(nop1)))
		|| isSome(tryExtractStruct(m.style, MTooltipText(const("")))) || isSome(tryExtractStruct(m.style, MOnClick(nop)));

	(\f ->
		TCopySize(
			TCopySize2(
				TBorder(
					padding.l,
					padding.t,
					padding.r,
					padding.b,
					m2t(m.content, f.parent)
				),
				\sz, tr -> TMask(tr, MShape(parent, [Fill(white)], sz, component))
			),
			\tr ->
				TEasedShadowShape(
					manager,
					f.parent,
					fif(
						f.down,
						clickElevation,
						fif(
							fOr(f.hover, f.focused),
							hoverElevation,
							elevation
						)
					),
					tr,
					graphicsStyle,
					0.3,
					ComponentShape(component)
				),
			false
		)
	)
	|> (\f ->
		TBorder(
			margin.l,
			margin.t,
			margin.r,
			margin.b,
			MComponent2T(
				manager,
				parent,
				"MSurface",
				concat(
					[
						MAddFocusGroup(
							concat(
								extractMComponentGroupState(m.style),
								[
									MaterialTheme(parent.theme with palette =
										MaterialPalette(parent.theme.palette with
											onBackground =
												if (getLightBackground(parent))
													MThemedColor(textColor, parent.theme.palette.onBackground.dark)
												else
													MThemedColor(parent.theme.palette.onBackground.light, textColor)
										)
									)
								]
							)
						),
						MRippleType(const(MRippleFill())),
						MRippleColor(const(textColor)),
						MClickEnabled(const(isClickable))
					],
					m.style
				),
				f,
				m2t
			)
		)
	)
}