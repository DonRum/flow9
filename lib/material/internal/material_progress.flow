import material/internal/material_shadow;
import material/material_graphics;
import material/internal/material_util;

export {
	// indeterminate
	MProgressBar2T(manager : MaterialManager, parent : MFocusGroup, m : MProgressBar) -> Tropic;
	MProgressCircle2T(manager : MaterialManager, parent : MFocusGroup, m : MProgressCircle) -> Tropic;

	// determinate, percent should grow from 0.0 to 1.0
	MProgressBarDeterm2T(manager : MaterialManager, parent : MFocusGroup, m : MProgressBarDeterm) -> Tropic;
	MProgressCircleDeterm2T(manager : MaterialManager, parent : MFocusGroup, m : MProgressCircleDeterm) -> Tropic;

	ProgressCircleWithArrow(parent : MFocusGroup, from : Transform<double>, to : Transform<double>, stroke : double, radius : double,
		triangleScale : Transform<double>, col : int, opacity : double, background : bool, lengthMultiplier : double, rotationMultiplier : double) -> Tropic;

	MPicture2T(manager : MaterialManager, parent : MFocusGroup, m : MPicture, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic;

	MPictureStyle2TPictureStyle(style : [MPictureStyle]) -> [TPictureStyle];

	mProgressEnabled = ref !isUrlParameterFalse("materialProgress");
}

MProgressBarDeterm2T(manager : MaterialManager, parent : MFocusGroup, m : MProgressBarDeterm) -> Tropic {
	percent = m.percent;
	style = m.style;

	animated = !contains(style, MNoAnimation());
	progress = make(fgetValue(percent));
	size = extractStruct(style, WidthHeight(-1., -1.));
	color = extractMColor(parent, style, MPrimaryColor());
	defBackground = MColor(color with shade = if (color.color == CCustom()) MTintColor(color) else 200);
	backgroundColor = extractStruct(style, MProgressBackgroundColor(defBackground)).color;

	TLet("rect", TGroup2(if (size.width >= 0.0) TFixed(size.width, 0.0) else TFillX(), TFixed(0.0, if (size.height >= 0.0) size.height else 4.0)),
		TGroup2(
			TRectangle([MThemeFill(parent, backgroundColor), FillOpacity(0.25)], TDisplay("rect")),
			TTweak([TAlign(const(b2d(getDefaultRtl())), const(0.0))],
				TScale(fselect(if (animated) progress else percent, FLift(\p -> Factor(p, 1.0))),
					TGhost("rect") |> addTBackground(color)
				),
				TGhost("rect")
			)
		)
	)
	|> (\f ->
		if (animated)
			MEasingAnimation(
				manager,
				parent,
				const(1.),
				const(easingStandartCurve),
				percent,
				\newPercent -> Some(Pair(getValue(progress), newPercent)),
				\newPercent, t -> nextDistinct(progress, lerp(newPercent.first, newPercent.second, t)),
				concatA([
					extractStructMany(style, MDuration(const(1.))),
					extractStructMany(style, MBezier(const(easingStandartCurve))),
					[MForceAnimation(), MStopOffScreen(true)]
				]),
				f
			)
		else f
	)
	|> makeTropicConstant2(size.width, size.height)
}

MProgressBar2T(manager : MaterialManager, parent : MFocusGroup, m : MProgressBar) -> Tropic {
	style = m.style;

	size = extractStruct(style, WidthHeight(-1., -1.));
	color = extractMColor(parent, style, MPrimaryColor());
	defBackground = MColor(color with shade = if (color.color == CCustom()) MTintColor(color) else 100);
	backgroundColor = extractStruct(style, MProgressBackgroundColor(defBackground)).color;

	bar = TGroup2(
		TAnimation(
			TFixed(size.width, size.height)
			|> addTBackground(color),
			const([
				FAnimationKeyframe([
					FTranslateValue(Point(-size.width * 0.5, 0.0)),
					FScaleValue(Factor(0.5, 1.0))
				]),
				FAnimationKeyframe([
					FTranslateValue(Point(size.width * 2.0 / 3.0, 0.0)),
					FScaleValue(Factor(2.0 / 3.0, 1.0))
				]),
				FAnimationKeyframe([
					FTranslateValue(Point(size.width * 4.0 / 3.0, 0.0)),
					FScaleValue(Factor(2.0 / 3.0, 1.0))
				])
			]),
			[
				FAnimationDuration(const(2.0)),
				FAnimationIterations(const(intMax)),
				FAnimationEasing(const(easingFastOutLinearIn))
			]
		),
		TAnimation(
			TFixed(size.width, size.height)
			|> addTBackground(color),
			const([
				FAnimationKeyframe([
					FTranslateValue(Point(-size.width, 0.0)),
					FScaleValue(Factor(0.5, 1.0))
				]),
				FAnimationKeyframe([
					FTranslateValue(Point(-size.width, 0.0)),
					FScaleValue(Factor(0.5, 1.0))
				]),
				FAnimationKeyframe([
					FTranslateValue(Point(size.width, 0.0)),
					FScaleValue(Factor(1.0 / 3.0, 1.0))
				])
			]),
			[
				FAnimationDuration(const(2.0)),
				FAnimationIterations(const(intMax)),
				FAnimationEasing(const(easingFastOutLinearIn))
			]
		)
	);

	TGroup2(
		TRectangle([MThemeFill(parent, backgroundColor)], TFixed(size.width, size.height)),
		TMask(bar, TRectangle([Fill(black)], TFixed(size.width, size.height)))
	)
}

MProgressCircleDeterm2T(manager : MaterialManager, parent : MFocusGroup, m : MProgressCircleDeterm) -> Tropic {
	style = m.style;
	percent = m.percent;

	circleSize = extractStruct(style, MProgressCircleSize(4.0, 20.0));
	color = extractMColor(parent, style, MPrimaryColor());
	size = (circleSize.radius + circleSize.stroke) * 2.0;

	ProgressCircleWithArrow(parent, fselect(percent, FLift(\p -> min(1.0, max(0.0, p)) * 360.)), make(0.), circleSize.stroke, circleSize.radius, zero,
		extractStruct(style, MFill(color)).color, extractStruct(style, FillOpacity(1.0)).opacity, false, 1., 2.)
	|> (\f -> TTranslate(const(Point(size / 2., size / 2.)), f))
	|> makeTropicConstant2(size, size)
}

MProgressCircle2T(manager : MaterialManager, parent : MFocusGroup, m : MProgressCircle) -> Tropic {
	style = m.style;
	circleSize = extractStruct(style, MProgressCircleSize(4.0, 20.0));
	color = extractMColor(parent, style, MPrimaryColor());
	size = (circleSize.radius + circleSize.stroke) * 2.0;
	strokeColor = extractStruct(style, MFill(color)).color;
	strokeOpacity = extractStruct(style, FillOpacity(1.0)).opacity;

	TGroup([
		TMask( // left
			TAnimation(
				TGraphics(
					CustomSector2(
						0.,
						0.,
						circleSize.radius,
						0.0,
						135.0,
						false,
						[]
					).path,
					[
						Stroke(strokeColor),
						StrokeWidth(circleSize.stroke),
						StrokeOpacity(strokeOpacity),
					]
				),
				const([
					FAnimationKeyframe([
						FRotateValue(0.0),
						FEasingValue(easingStandartCurve)
					]),
					FAnimationKeyframe([
						FRotateValue(-135.0),
						FEasingValue(easingStandartCurve)
					]),
					FAnimationKeyframe([
						FRotateValue(0.0)
					])
				]),
				[
					FAnimationDuration(const(4.0 / 3.0)),
					FAnimationIterations(const(intMax))
				]
			),
			TGraphics(
				[GRect(-size, -size, size, size * 2.0)],
				[Fill(white)]
			)
		), // right
		TMask(
			TAnimation(
				TGraphics(
					CustomSector2(
						0.,
						0.,
						circleSize.radius,
						45.0,
						180.0,
						false,
						[]
					).path,
					[
						Stroke(strokeColor),
						StrokeWidth(circleSize.stroke),
						StrokeOpacity(strokeOpacity),
					]
				),
				const([
					FAnimationKeyframe([
						FRotateValue(-180.0),
						FEasingValue(easingStandartCurve)
					]),
					FAnimationKeyframe([
						FRotateValue(-45.0),
						FEasingValue(easingStandartCurve)
					]),
					FAnimationKeyframe([
						FRotateValue(-180.0)
					])
				]),
				[
					FAnimationDuration(const(4.0 / 3.0)),
					FAnimationIterations(const(intMax))
				]
			),
			TGraphics(
				[GRect(0.0, -size, size, size * 2.0)],
				[Fill(white)]
			)
		),
		TGraphics( // gap
			CustomSector2(
				0.,
				0.,
				circleSize.radius,
				0.0,
				10.0,
				false,
				[]
			).path,
			[
				Stroke(strokeColor),
				StrokeWidth(circleSize.stroke),
				StrokeOpacity(strokeOpacity),
			]
		)
		|> (\f -> TRotate(const(-5.0), f))
	])
	|> (\f ->
		TAnimation(
			f,
			const([
				FAnimationKeyframe([
					FRotateValue(0.0),
					FEasingValue(easingStandartCurve)
				]),
				FAnimationKeyframe([
					FRotateValue(135.0),
					FEasingValue(easingStandartCurve)
				]),
				FAnimationKeyframe([
					FRotateValue(270.0),
					FEasingValue(easingStandartCurve)
				]),
				FAnimationKeyframe([
					FRotateValue(405.0),
					FEasingValue(easingStandartCurve)
				]),
				FAnimationKeyframe([
					FRotateValue(540.0),
					FEasingValue(easingStandartCurve)
				]),
				FAnimationKeyframe([
					FRotateValue(675.0),
					FEasingValue(easingStandartCurve)
				]),
				FAnimationKeyframe([
					FRotateValue(810.0),
					FEasingValue(easingStandartCurve)
				]),
				FAnimationKeyframe([
					FRotateValue(945.0),
					FEasingValue(easingStandartCurve)
				]),
				FAnimationKeyframe([
					FRotateValue(1080.0)
				])
			]),
			[
				FAnimationDuration(const(16.0 / 3.0)),
				FAnimationIterations(const(intMax))
			]
		)
	)
	|> (\f ->
		TAnimation(
			f,
			const([
				FAnimationKeyframe([
					FRotateValue(0.0)
				]),
				FAnimationKeyframe([
					FRotateValue(360.0)
				])
			]),
			[
				FAnimationDuration(const(8.0 / 3.0)),
				FAnimationIterations(const(intMax))
			]
		)
	)
	|> (\progressCircle -> TTranslate(const(Point(size / 2., size / 2.)), progressCircle))
	|> (\t -> TGroup2(t, TRectangle(interactiveRectangleStyle, TFixed(size, size))))
}

ProgressCircleWithArrow(parent : MFocusGroup, from : Transform<double>, to : Transform<double>, stroke : double, radius : double,
	triangleScale : Transform<double>, col : int, opacity : double, background : bool, lengthMultiplier : double, rotationMultiplier : double) -> Tropic {

	innerR = radius /*10.0*/;
	outterR = 2.0 * radius /*20.0*/;
	triangleMetrics = 5.0;
	shadow = const(4.0);

	triangle =
		TGraphics([LineTo(0.0, 2.0), LineTo(sqrt(2.0), 1.0), LineTo(0.0, 0.0), ClosePath()], [Fill(col), FillOpacity(opacity)])
		|> (\m -> TScale(fselect(triangleScale, FLift(\s -> Factor(triangleMetrics * s, triangleMetrics * s))), m))
		|> (\m -> TTranslate(fselect(triangleScale, FLift(\s -> (Point(0.0, -innerR - triangleMetrics * s)))), m))
		|> (\m -> TRotate(if (rotationMultiplier == 1.) from else fselect(from, FLift(\fr -> fr * rotationMultiplier)), m));

	outterCircle = \ ->
		TCircle(outterR, [Fill(white)])
		|> (\m -> TShadowShape(parent, shadow, m, RoundShape()))
		|> (\m -> TTranslate(const(Point(-outterR, -outterR)), m));

	TRotate(
		fselect2(from, to, FLift2(\f, t ->
			if (t > f)
				f * rotationMultiplier
			else
				f * rotationMultiplier + (t - f) * lengthMultiplier
		)),
		TDynamicGraphics(
			fselect2(from, to, FLift2(\f, t ->
				CustomSector2(
					0.,
					0.,
					radius,
					0.0,
					abs(t - f) * lengthMultiplier,
					false,
					[]
				).path
			)),
			const([
				Stroke(col),
				StrokeWidth(stroke),
				StrokeOpacity(opacity),
			])
		)
	)
	|> (\f -> TGroup2(f, triangle))
	|> (\f -> if (!background) f else TGroup2(outterCircle(), f))
}

MPicture2T(manager : MaterialManager, parent : MFocusGroup, m : MPicture, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	showLoading = extractStruct(m.style, MPictureShowLoading(true)).show;
	customLoading = tryExtractStruct(m.style, MPictureCustomLoading(TEmpty()));
	tstyle = MPictureStyle2TPictureStyle(m.style);

	if (showLoading || isSome(customLoading)) {
		bgColor = MBackgroundColor();
		itemsColor = MTextColor();
		onPicLoaded = extractStruct(m.style, OnLoaded(nop)).fn;
		picLoading = make(false);
		uns = interruptibleTimer(100, \ -> next(picLoading, true));

		picSize =
			eitherMap(
				tryExtractStruct(tstyle, TPictureSize(const(WidthHeight(0., 0.)))),
				\ds -> Some(ds.size),
				maybeMap(
					tryExtractStruct(tstyle, WidthHeight(-1.0, -1.0)),
					\cs -> const(cs)
				)
			);

		pstyle = replaceStruct(tstyle, OnLoaded(\ -> {uns(); onPicLoaded(); nextDistinct(picLoading, false);}));

		TDecorator(
			TPicture(m.picURL, pstyle),
			[
				Pair(
					picLoading,
					\__ ->
						eitherMap(customLoading, \cl ->
							m2t(cl.loading, parent),
							MProgressCircle2T(manager, parent, MProgressCircle([itemsColor]))
						)
						|> (\f -> TAlpha(const(0.72), f))
						|> (\f -> TFrame(0., 0., [MThemeFill(parent, bgColor)], f))
						|> (\f -> TCenterIn(f, eitherMap(picSize, \ps -> TSized(ps), TFillXY())))
				)
			],
			true
		)
	} else {
		TPicture(m.picURL, tstyle)
	}
}

MPictureStyle2TPictureStyle(style : [MPictureStyle]) -> [TPictureStyle] {
	filtermap(style, \s -> switch (s) {
		MPictureSize(wh) : Some(TPictureSize(wh));
		TPictureStyle() : {a : Maybe<TPictureStyle> = Some(s); a};
		InspectRealSize(__) : {a : Maybe<TPictureStyle> = Some(s); a};
		default : None();
	});
}