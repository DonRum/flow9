import material/internal/material_focus_util;
import tropic/tropic_gui;

export {
	getShapeByComponent(parent : MFocusGroup, component : string) -> MaterialShapeRange;

	getLightBackground(parent : MaterialManagerOrFocus) -> bool;
	getPrimaryColor(parent : MaterialManagerOrFocus) -> MColor;
	getPrimaryVariantColor(parent : MaterialManagerOrFocus) -> MColor;
	getSecondaryColor(parent : MaterialManagerOrFocus) -> MColor;
	getSecondaryVariantColor(parent : MaterialManagerOrFocus) -> MColor;
	getAccentColor = getSecondaryColor;
	getBackgroundColor(parent : MaterialManagerOrFocus) -> MColor;
	getSurfaceColor(parent : MaterialManagerOrFocus) -> MColor;
	getErrorColor(parent : MaterialManagerOrFocus) -> MColor;
	getToolbarColor(parent : MaterialManagerOrFocus) -> MColor;

	getOnPrimaryColor(parent : MaterialManagerOrFocus) -> MColor;
	getOnSecondaryColor(parent : MaterialManagerOrFocus) -> MColor;
	getOnAccentColor = getOnSecondaryColor;
	getOnBackgroundColor(parent : MaterialManagerOrFocus) -> MColor;
	getTextColor = getOnBackgroundColor;
	getIconsColor = getOnBackgroundColor;
	getSeparatorColor = getOnBackgroundColor;
	getOnSurfaceColor(parent : MaterialManagerOrFocus) -> MColor;
	getOnErrorColor(parent : MaterialManagerOrFocus) -> MColor;
	getOnToolbarColor(parent : MaterialManagerOrFocus) -> MColor;
	getToolbarItemsColor = getOnToolbarColor;

	getFontStyle(parent : MaterialManagerOrFocus) -> MFontStyle;

	contrastingColor(parent : MaterialManagerOrFocus) -> int;
	contrastingMColor(parent : MaterialManagerOrFocus) -> MColor;
	sameLightMColor(parent : MaterialManagerOrFocus) -> MColor;

	MThemeColor2MColor(parent : MaterialManagerOrFocus, color : MThemeColor) -> MColor;
	extractMColor(parent : MaterialManagerOrFocus, style : [flow], defaultColor : MThemeColor) -> MColor;
	tryExtractMColor(parent : MaterialManagerOrFocus, style : [flow]) -> Maybe<MColor>;
	replaceMThemeColor(style : [flow], color : MThemeColor) -> [flow];
	MThemeColor2int(parent : MaterialManagerOrFocus, color : MThemeColor) -> int;
	MThemeFill(parent : MaterialManagerOrFocus, color : MThemeColor) -> Fill;

	FMaterialShape(parent : MFocusGroup, style : [GraphicsStyle], component : string) -> (WidthHeight) -> FForm;
	MShape(manager : MFocusGroup, style : [TGraphicsStyle], size : Tropic, component : string) -> Tropic;
	MShapeFrame(manager : MFocusGroup, style : [TGraphicsStyle], content : Tropic, component : string) -> Tropic;

	makeMaterialTheme(lightBackground : bool, primaryColor : MColor, secondaryColor : MColor) -> MaterialTheme;
	MLightTheme(theme : MaterialTheme, lightBackground : bool) -> MaterialTheme;

	getDarkMode() -> bool {
		s2b(getKeyValue("dark_mode", b2s(isDarkMode())));
	};

	defaultMaterialPalette =
		MaterialPalette(
			true,
			MThemedColor(MCustomColor(0x6200EE), MCustomColor(0xBB86FC)),
			MThemedColor(MCustomColor(0x3700B3), MCustomColor(0x3700B3)),
			MThemedColor(MCustomColor(0x03DAC6), MCustomColor(0x03DAC6)),
			MThemedColor(MCustomColor(0x018786), MCustomColor(0x03DAC6)),
			MThemedColor(MBackgroundMColor(true), MBackgroundMColor(false)),
			MThemedColor(MSurfaceMColor(true), MSurfaceMColor(false)),
			MThemedColor(MErrorMColor(true), MErrorMColor(false)),
			MThemedColor(MCustomColor(0x6200EE), MCustomColor(0xBB86FC)),
			MThemedColor(MWhite(), MBlack()),
			MThemedColor(MBlack(), MBlack()),
			MThemedColor(MBlack(), MWhite()),
			MThemedColor(MBlack(), MWhite()),
			MThemedColor(MWhite(), MBlack()),
			MThemedColor(MWhite(), MBlack())
		);

	defaultMaterialSharpCorner =
		CutCorner(0.0);
	defaultMaterialRoundedCorner =
		RoundedCorner(4.0);
	defaultMaterialRoundCorner =
		RoundedCornerPercent(0.5);

	defaultMaterialSharpShape =
		MaterialShape(defaultMaterialSharpCorner, defaultMaterialSharpCorner, defaultMaterialSharpCorner, defaultMaterialSharpCorner);
	defaultMaterialRoundedShape =
		MaterialShape(defaultMaterialRoundedCorner, defaultMaterialRoundedCorner, defaultMaterialRoundedCorner, defaultMaterialRoundedCorner);
	defaultMaterialRoundShape =
		MaterialShape(defaultMaterialRoundCorner, defaultMaterialRoundCorner, defaultMaterialRoundCorner, defaultMaterialRoundCorner);

	defaultMaterialShapeApplicable =
		MaterialShapeApplicable(true, true, true, true);
	defaultMaterialShapeLimit =
		MaterialShapeLimit(0.0, 48.0, 0.0, 0.5);

	defaultMaterialShapeRange =
		MaterialShapeRange(defaultMaterialSharpShape, defaultMaterialShapeApplicable, defaultMaterialShapeLimit, defaultMaterialShapeLimit);

	defaultMaterialShapeManager =
		MaterialShapeManager(
			pairs2tree([
				Pair(
					"default",
					MaterialShapeRange(
						defaultMaterialRoundedShape,
						defaultMaterialShapeApplicable,
						MaterialShapeLimit(0.0, 28.0, 0.0, 0.5),
						MaterialShapeLimit(0.0, 28.0, 0.0, 0.5)
					)
				),
				Pair(
					"icon",
					MaterialShapeRange(
						defaultMaterialRoundShape,
						defaultMaterialShapeApplicable,
						MaterialShapeLimit(0.0, 28.0, 0.0, 0.5),
						MaterialShapeLimit(0.0, 28.0, 0.0, 0.5)
					)
				),
				Pair(
					"button",
					MaterialShapeRange(
						defaultMaterialRoundedShape,
						defaultMaterialShapeApplicable,
						MaterialShapeLimit(0.0, 20.0, 0.0, 0.5),
						MaterialShapeLimit(0.0, 6.0, 0.0, 0.5)
					)
				),
				Pair(
					"chip",
					MaterialShapeRange(
						defaultMaterialRoundShape,
						defaultMaterialShapeApplicable,
						MaterialShapeLimit(0.0, 16.0, 0.0, 0.5),
						MaterialShapeLimit(0.0, 0.0, 0.0, 0.0)
					)
				),
				Pair(
					"floating action button",
					MaterialShapeRange(
						defaultMaterialRoundShape,
						defaultMaterialShapeApplicable,
						MaterialShapeLimit(0.0, 28.0, 0.0, 0.5),
						MaterialShapeLimit(0.0, 28.0, 0.0, 0.5)
					)
				),
				Pair(
					"filled text field",
					MaterialShapeRange(
						MaterialShape(
							defaultMaterialRoundedCorner,
							defaultMaterialRoundedCorner,
							defaultMaterialSharpCorner,
							defaultMaterialSharpCorner
						),
						defaultMaterialShapeApplicable,
						MaterialShapeLimit(0.0, 20.0, 0.0, 0.5),
						MaterialShapeLimit(0.0, 12.0, 0.0, 0.5)
					)
				),
				Pair(
					"outlined text field",
					MaterialShapeRange(
						defaultMaterialRoundedShape,
						defaultMaterialShapeApplicable,
						MaterialShapeLimit(0.0, 20.0, 0.0, 0.5),
						MaterialShapeLimit(0.0, 12.0, 0.0, 0.5)
					)
				),
				Pair(
					"snackbar",
					MaterialShapeRange(
						defaultMaterialRoundedShape,
						defaultMaterialShapeApplicable,
						MaterialShapeLimit(0.0, 24.0, 0.0, 0.5),
						MaterialShapeLimit(0.0, 12.0, 0.0, 0.5)
					)
				),
				Pair(
					"tooltip",
					MaterialShapeRange(
						defaultMaterialRoundedShape,
						defaultMaterialShapeApplicable,
						MaterialShapeLimit(0.0, 16.0, 0.0, 0.5),
						MaterialShapeLimit(0.0, 0.0, 0.0, 0.0)
					)
				)
			]),
			pairs2tree([
				Pair(
					"default",
					MaterialShapeRange(
						defaultMaterialRoundedShape,
						defaultMaterialShapeApplicable,
						MaterialShapeLimit(0.0, 36.0, 0.0, 0.0),
						MaterialShapeLimit(0.0, 16.0, 0.0, 0.0)
					)
				),
				Pair(
					"card",
					MaterialShapeRange(
						defaultMaterialRoundedShape,
						defaultMaterialShapeApplicable,
						MaterialShapeLimit(0.0, 24.0, 0.0, 0.0),
						MaterialShapeLimit(0.0, 16.0, 0.0, 0.0)
					)
				),
				Pair(
					"dialog",
					MaterialShapeRange(
						defaultMaterialRoundedShape,
						defaultMaterialShapeApplicable,
						MaterialShapeLimit(0.0, 36.0, 0.0, 0.0),
						MaterialShapeLimit(0.0, 16.0, 0.0, 0.0)
					)
				),
				Pair(
					"dialog fullscreen",
					MaterialShapeRange(
						defaultMaterialSharpShape,
						MaterialShapeApplicable(false, false, false, false),
						MaterialShapeLimit(0.0, 0.0, 0.0, 0.0),
						MaterialShapeLimit(0.0, 0.0, 0.0, 0.0)
					)
				),
				Pair(
					"image list",
					MaterialShapeRange(
						defaultMaterialSharpShape,
						defaultMaterialShapeApplicable,
						MaterialShapeLimit(0.0, 24.0, 0.0, 0.0),
						MaterialShapeLimit(0.0, 16.0, 0.0, 0.0)
					)
				),
				Pair(
					"menu",
					MaterialShapeRange(
						defaultMaterialRoundedShape,
						defaultMaterialShapeApplicable,
						MaterialShapeLimit(0.0, 20.0, 0.0, 0.0),
						MaterialShapeLimit(0.0, 12.0, 0.0, 0.0)
					)
				)
			]),
			pairs2tree([
				Pair(
					"default",
					MaterialShapeRange(
						defaultMaterialSharpShape,
						defaultMaterialShapeApplicable,
						MaterialShapeLimit(0.0, 36.0, 0.0, 0.0),
						MaterialShapeLimit(0.0, 24.0, 0.0, 0.0)
					)
				),
				Pair(
					"backdrop",
					MaterialShapeRange(
						MaterialShape(RoundedCorner(24.0), RoundedCorner(24.0), defaultMaterialSharpCorner, defaultMaterialSharpCorner),
						MaterialShapeApplicable(true, true, false, false),
						MaterialShapeLimit(0.0, 36.0, 0.0, 0.0),
						MaterialShapeLimit(0.0, 24.0, 0.0, 0.0)
					)
				),
				Pair(
					"datatable",
					MaterialShapeRange(
						defaultMaterialRoundedShape,
						defaultMaterialShapeApplicable,
						MaterialShapeLimit(0.0, 20.0, 0.0, 0.0),
						MaterialShapeLimit(0.0, 12.0, 0.0, 0.0)
					)
				),
				Pair(
					"expanded bottom sheet",
					MaterialShapeRange(
						defaultMaterialSharpShape,
						MaterialShapeApplicable(false, false, false, false),
						MaterialShapeLimit(0.0, 0.0, 0.0, 0.0),
						MaterialShapeLimit(0.0, 0.0, 0.0, 0.0)
					)
				),
				Pair(
					"collapsed bottom sheet",
					MaterialShapeRange(
						defaultMaterialSharpShape,
						MaterialShapeApplicable(true, true, false, false),
						MaterialShapeLimit(0.0, 24.0, 0.0, 0.0),
						MaterialShapeLimit(0.0, 12.0, 0.0, 0.0)
					)
				),
				Pair(
					"navigation drawer",
					MaterialShapeRange(
						defaultMaterialSharpShape,
						defaultMaterialShapeApplicable,
						MaterialShapeLimit(0.0, 36.0, 0.0, 0.0),
						MaterialShapeLimit(0.0, 18.0, 0.0, 0.0)
					)
				),
				Pair(
					"side sheet",
					MaterialShapeRange(
						defaultMaterialSharpShape,
						defaultMaterialShapeApplicable,
						MaterialShapeLimit(0.0, 36.0, 0.0, 0.0),
						MaterialShapeLimit(0.0, 18.0, 0.0, 0.0)
					)
				)
			])
		);

	MaterialShapeGroup ::= MaterialSmallShape, MaterialMediumShape, MaterialLargeShape;
		MaterialSmallShape(name : string);
		MaterialMediumShape(name : string);
		MaterialLargeShape(name : string);

	defaultMaterialShapeMapping : Tree<string, MaterialShapeGroup> =
		pairs2tree([
			// Small
			Pair("MIcon", cast(MaterialSmallShape("icon") : MaterialSmallShape -> MaterialShapeGroup)),
			Pair("MLetterIcon", MaterialSmallShape("icon")),
			Pair("MAvatar", MaterialSmallShape("icon")),
			Pair("MIconButton", MaterialSmallShape("icon")),
			Pair("MIconToggle", MaterialSmallShape("icon")),
			Pair("MCheckBox", MaterialSmallShape("icon")),
			Pair("MRadio", MaterialSmallShape("icon")),
			Pair("MSwitchControl", MaterialSmallShape("icon")),
			Pair("MSlider", MaterialSmallShape("icon")),

			Pair("MTextButton", MaterialSmallShape("button")),
			Pair("MTextClickable", MaterialSmallShape("button")),
			Pair("MClickable", MaterialSmallShape("button")),
			Pair("MComponent", MaterialSmallShape("button")),

			Pair("MChip", MaterialSmallShape("chip")),

			Pair("MFloatingButton", MaterialSmallShape("floating action button")),

			Pair("MSmallEditDialog", MaterialSmallShape("filled text field")),
			Pair("MAutoComplete", MaterialSmallShape("filled text field")),

			Pair("MTextInput", MaterialSmallShape("outlined text field")),

			Pair("MSnackbar", MaterialSmallShape("snackbar")),

			Pair("MTooltip", MaterialSmallShape("tooltip")),

			// Medium
			Pair("MCard", MaterialMediumShape("card")),

			Pair("MTimePicker", MaterialMediumShape("dialog")),
			Pair("MDatePicker", MaterialMediumShape("dialog")),
			Pair("MColorPicker", MaterialMediumShape("dialog")),
			Pair("MColorPickerMultiSelect", MaterialMediumShape("dialog")),
			Pair("MDialog", MaterialMediumShape("dialog")),

			Pair("MFullscreenDialog", MaterialMediumShape("dialog fullscreen")),

			Pair("MGridList", MaterialMediumShape("image list")),
			Pair("MImageMap", MaterialMediumShape("image list")),

			Pair("MMenu", MaterialMediumShape("menu")),
			Pair("MDynamicMenu", MaterialMediumShape("menu")),
			Pair("MDropDownMenu", MaterialMediumShape("menu")),
			Pair("MMenuPanel", MaterialMediumShape("menu")),
			Pair("MDropDown", MaterialMediumShape("menu")),
			Pair("MMultiSelectDropDown", MaterialMediumShape("menu")),

			// Large
			Pair("MDynamicDataTable", MaterialLargeShape("datatable")),
			Pair("MDataTable", MaterialLargeShape("datatable")),
			Pair("MChart", MaterialLargeShape("datatable")),

			Pair("MNavigation", MaterialLargeShape("navigation drawer")),

			Pair("MSideNav", MaterialLargeShape("side sheet")),

			Pair("MBottomNav", MaterialLargeShape("collapsed bottom sheet")),
			Pair("MBottomSheet", MaterialLargeShape("collapsed bottom sheet")),

			Pair("MDynamicTabs", MaterialLargeShape("tabs")),
		]);

	// defaultMaterialTypeManager =
	// 	MaterialTypeManager(
	// 		MaterialTypeScale("RobotoLight", 96., PrimaryOpacity(), -1.5),
	// 		MaterialTypeScale("RobotoLight", 60., PrimaryOpacity(), -0.5),
	// 		MaterialTypeScale("Roboto", 48., PrimaryOpacity(), 0.0),
	// 		MaterialTypeScale("Roboto", 34., PrimaryOpacity(), 0.25),
	// 		MaterialTypeScale("Roboto", 24., PrimaryOpacity(), 0.0),
	// 		MaterialTypeScale("RobotoMedium", 20., PrimaryOpacity(), 0.15),
	// 		MaterialTypeScale("Roboto", 16., PrimaryOpacity(), 0.15),
	// 		MaterialTypeScale("RobotoMedium", 14., PrimaryOpacity(), 0.1),
	// 		MaterialTypeScale("Roboto", 16., PrimaryOpacity(), 0.5),
	// 		MaterialTypeScale("Roboto", 14., PrimaryOpacity(), 0.25),
	// 		MaterialTypeScale("RobotoMedium", 14., PrimaryOpacity(), 1.25),
	// 		MaterialTypeScale("Roboto", 12., PrimaryOpacity(), 0.4),
	// 		MaterialTypeScale("Roboto", 10., PrimaryOpacity(), 1.5)
	// 	);

	defaultMaterialTypeManager =
		MaterialTypeManager(
			MDisplay5(),
			MDisplay4(),
			MDisplay3(),
			MDisplay1(),
			MHeadline(),
			MTitle(),
			MSubheading(),
			MSubtitle(),
			MBodyPrimary(),
			MBody(),
			MButtonStyle(),
			MCaption(),
			MOverline()
		);

	MaterialType2MFontStyle(parent : MFocusGroup, type : MaterialType) -> MFontStyle;

	defaultMaterialTheme =
		MaterialTheme(
			defaultMaterialPalette,
			defaultMaterialShapeManager,
			defaultMaterialTypeManager,
			!isUrlParameterFalse("animationEnabled"),
			!isUrlParameterFalse("animationEnabled")
		);

	disabledItemOpacityBase = 0.38;
	disabledItemOpacity = ref disabledItemOpacityBase;
	disabledItemOpacityDarkBase = 0.38;
	disabledItemOpacityDark = ref disabledItemOpacityDarkBase;
	defaultDisabledItemOpacity(lightBackground : bool) {if (lightBackground) ^disabledItemOpacity else ^disabledItemOpacityDark}

	inactiveItemLabelOpacityBase = 0.6;
	inactiveItemLabelOpacity = ref inactiveItemLabelOpacityBase;
	inactiveItemLabelOpacityDarkBase = 0.6;
	inactiveItemLabelOpacityDark = ref inactiveItemLabelOpacityDarkBase;
	defaultInactiveItemLabelOpacity(lightBackground : bool) {if (lightBackground) ^inactiveItemLabelOpacity else ^inactiveItemLabelOpacityDark}
}

parseMaterialShapeCorner(corner : MaterialShapeCorner) -> (WidthHeight) -> Pair<double, bool> {
	switch (corner : MaterialShapeCorner) {
		RoundedCorner(radius) : \__ -> Pair(radius, true);
		CutCorner(radius) : \__ -> Pair(radius, false);
		RoundedCornerPercent(percent) : \wh -> Pair(min(wh.width, wh.height) * percent, true);
		CutCornerPercent(percent) : \wh -> Pair(min(wh.width, wh.height) * percent, false);
	}
}

getShapeByComponent(parent : MFocusGroup, component : string) -> MaterialShapeRange {
	componentMapping = lookupTree(defaultMaterialShapeMapping, component);

	either(
		fold(
			eitherMap(
				componentMapping,
				\group -> {
					switch (group) {
						MaterialSmallShape(name) : {
							[
								\ -> lookupTree(parent.theme.shape.small, component),
								\ -> lookupTree(parent.theme.shape.small, name),
								\ -> lookupTree(parent.theme.shape.small, "default")
							]
						}
						MaterialMediumShape(name) : {
							[
								\ -> lookupTree(parent.theme.shape.medium, component),
								\ -> lookupTree(parent.theme.shape.medium, name),
								\ -> lookupTree(parent.theme.shape.medium, "default"),
								\ -> lookupTree(parent.theme.shape.small, "default")
							]
						}
						MaterialLargeShape(name) : {
							[
								\ -> lookupTree(parent.theme.shape.large, component),
								\ -> lookupTree(parent.theme.shape.large, name),
								\ -> lookupTree(parent.theme.shape.large, "default"),
								\ -> lookupTree(parent.theme.shape.medium, "default"),
								\ -> lookupTree(parent.theme.shape.small, "default")
							]
						}
					}
				},
				[
					\ -> lookupTree(parent.theme.shape.large, component),
					\ -> lookupTree(parent.theme.shape.medium, component),
					\ -> lookupTree(parent.theme.shape.small, component)
				]
			),
			None(),
			\acc, sh -> {
				if (isNone(acc)) {
					sh();
				} else {
					acc;
				}
			}
		),
		defaultMaterialShapeRange
	);
}

getLightBackground(parent : MaterialManagerOrFocus) -> bool {
	switchMaterialManagerOrFocus(
		parent,
		\manager -> manager.theme.palette.light,
		\mfocus -> mfocus.parent.theme.palette.light,
		\mfocusgroup -> mfocusgroup.theme.palette.light
	);
};
getPrimaryColor(parent : MaterialManagerOrFocus) -> MColor {
	switchMaterialManagerOrFocus(
		parent,
		\manager -> if (manager.theme.palette.light) manager.theme.palette.primary.light else manager.theme.palette.primary.dark,
		\mfocus -> if (mfocus.parent.theme.palette.light) mfocus.parent.theme.palette.primary.light else mfocus.parent.theme.palette.primary.dark,
		\mfocusgroup -> if (mfocusgroup.theme.palette.light) mfocusgroup.theme.palette.primary.light else mfocusgroup.theme.palette.primary.dark
	);
};
getPrimaryVariantColor(parent : MaterialManagerOrFocus) -> MColor {
	switchMaterialManagerOrFocus(
		parent,
		\manager -> if (manager.theme.palette.light) manager.theme.palette.primaryVariant.light else manager.theme.palette.primaryVariant.dark,
		\mfocus -> if (mfocus.parent.theme.palette.light) mfocus.parent.theme.palette.primaryVariant.light else mfocus.parent.theme.palette.primaryVariant.dark,
		\mfocusgroup -> if (mfocusgroup.theme.palette.light) mfocusgroup.theme.palette.primaryVariant.light else mfocusgroup.theme.palette.primaryVariant.dark
	);
};
getSecondaryColor(parent : MaterialManagerOrFocus) -> MColor {
	switchMaterialManagerOrFocus(
		parent,
		\manager -> if (manager.theme.palette.light) manager.theme.palette.secondary.light else manager.theme.palette.secondary.dark,
		\mfocus -> if (mfocus.parent.theme.palette.light) mfocus.parent.theme.palette.secondary.light else mfocus.parent.theme.palette.secondary.dark,
		\mfocusgroup -> if (mfocusgroup.theme.palette.light) mfocusgroup.theme.palette.secondary.light else mfocusgroup.theme.palette.secondary.dark
	);
};
getSecondaryVariantColor(parent : MaterialManagerOrFocus) -> MColor {
	switchMaterialManagerOrFocus(
		parent,
		\manager -> if (manager.theme.palette.light) manager.theme.palette.secondaryVariant.light else manager.theme.palette.secondaryVariant.dark,
		\mfocus -> if (mfocus.parent.theme.palette.light) mfocus.parent.theme.palette.secondaryVariant.light else mfocus.parent.theme.palette.secondaryVariant.dark,
		\mfocusgroup -> if (mfocusgroup.theme.palette.light) mfocusgroup.theme.palette.secondaryVariant.light else mfocusgroup.theme.palette.secondaryVariant.dark
	);
};
getBackgroundColor(parent : MaterialManagerOrFocus) -> MColor {
	switchMaterialManagerOrFocus(
		parent,
		\manager -> if (manager.theme.palette.light) manager.theme.palette.background.light else manager.theme.palette.background.dark,
		\mfocus -> if (mfocus.parent.theme.palette.light) mfocus.parent.theme.palette.background.light else mfocus.parent.theme.palette.background.dark,
		\mfocusgroup -> if (mfocusgroup.theme.palette.light) mfocusgroup.theme.palette.background.light else mfocusgroup.theme.palette.background.dark
	);
};
getSurfaceColor(parent : MaterialManagerOrFocus) -> MColor {
	switchMaterialManagerOrFocus(
		parent,
		\manager -> if (manager.theme.palette.light) manager.theme.palette.surface.light else manager.theme.palette.surface.dark,
		\mfocus -> if (mfocus.parent.theme.palette.light) mfocus.parent.theme.palette.surface.light else mfocus.parent.theme.palette.surface.dark,
		\mfocusgroup -> if (mfocusgroup.theme.palette.light) mfocusgroup.theme.palette.surface.light else mfocusgroup.theme.palette.surface.dark
	);
};
getErrorColor(parent : MaterialManagerOrFocus) -> MColor {
	switchMaterialManagerOrFocus(
		parent,
		\manager -> if (manager.theme.palette.light) manager.theme.palette.error.light else manager.theme.palette.error.dark,
		\mfocus -> if (mfocus.parent.theme.palette.light) mfocus.parent.theme.palette.error.light else mfocus.parent.theme.palette.error.dark,
		\mfocusgroup -> if (mfocusgroup.theme.palette.light) mfocusgroup.theme.palette.error.light else mfocusgroup.theme.palette.error.dark
	);
};
getToolbarColor(parent : MaterialManagerOrFocus) -> MColor {
	switchMaterialManagerOrFocus(
		parent,
		\manager -> if (manager.theme.palette.light) manager.theme.palette.toolbar.light else manager.theme.palette.toolbar.dark,
		\mfocus -> if (mfocus.parent.theme.palette.light) mfocus.parent.theme.palette.toolbar.light else mfocus.parent.theme.palette.toolbar.dark,
		\mfocusgroup -> if (mfocusgroup.theme.palette.light) mfocusgroup.theme.palette.toolbar.light else mfocusgroup.theme.palette.toolbar.dark
	);
};
getOnPrimaryColor(parent : MaterialManagerOrFocus) -> MColor {
	switchMaterialManagerOrFocus(
		parent,
		\manager -> if (manager.theme.palette.light) manager.theme.palette.onPrimary.light else manager.theme.palette.onPrimary.dark,
		\mfocus -> if (mfocus.parent.theme.palette.light) mfocus.parent.theme.palette.onPrimary.light else mfocus.parent.theme.palette.onPrimary.dark,
		\mfocusgroup -> if (mfocusgroup.theme.palette.light) mfocusgroup.theme.palette.onPrimary.light else mfocusgroup.theme.palette.onPrimary.dark
	);
};
getOnSecondaryColor(parent : MaterialManagerOrFocus) -> MColor {
	switchMaterialManagerOrFocus(
		parent,
		\manager -> if (manager.theme.palette.light) manager.theme.palette.onSecondary.light else manager.theme.palette.onSecondary.dark,
		\mfocus -> if (mfocus.parent.theme.palette.light) mfocus.parent.theme.palette.onSecondary.light else mfocus.parent.theme.palette.onSecondary.dark,
		\mfocusgroup -> if (mfocusgroup.theme.palette.light) mfocusgroup.theme.palette.onSecondary.light else mfocusgroup.theme.palette.onSecondary.dark
	);
};
getOnBackgroundColor(parent : MaterialManagerOrFocus) -> MColor {
	switchMaterialManagerOrFocus(
		parent,
		\manager -> if (manager.theme.palette.light) manager.theme.palette.onBackground.light else manager.theme.palette.onBackground.dark,
		\mfocus -> if (mfocus.parent.theme.palette.light) mfocus.parent.theme.palette.onBackground.light else mfocus.parent.theme.palette.onBackground.dark,
		\mfocusgroup -> if (mfocusgroup.theme.palette.light) mfocusgroup.theme.palette.onBackground.light else mfocusgroup.theme.palette.onBackground.dark
	);
};
getOnSurfaceColor(parent : MaterialManagerOrFocus) -> MColor {
	switchMaterialManagerOrFocus(
		parent,
		\manager -> if (manager.theme.palette.light) manager.theme.palette.onSurface.light else manager.theme.palette.onSurface.dark,
		\mfocus -> if (mfocus.parent.theme.palette.light) mfocus.parent.theme.palette.onSurface.light else mfocus.parent.theme.palette.onSurface.dark,
		\mfocusgroup -> if (mfocusgroup.theme.palette.light) mfocusgroup.theme.palette.onSurface.light else mfocusgroup.theme.palette.onSurface.dark
	);
};
getOnErrorColor(parent : MaterialManagerOrFocus) -> MColor {
	switchMaterialManagerOrFocus(
		parent,
		\manager -> if (manager.theme.palette.light) manager.theme.palette.onError.light else manager.theme.palette.onError.dark,
		\mfocus -> if (mfocus.parent.theme.palette.light) mfocus.parent.theme.palette.onError.light else mfocus.parent.theme.palette.onError.dark,
		\mfocusgroup -> if (mfocusgroup.theme.palette.light) mfocusgroup.theme.palette.onError.light else mfocusgroup.theme.palette.onError.dark
	);
};
getOnToolbarColor(parent : MaterialManagerOrFocus) -> MColor {
	switchMaterialManagerOrFocus(
		parent,
		\manager -> if (manager.theme.palette.light) manager.theme.palette.onToolbar.light else manager.theme.palette.onToolbar.dark,
		\mfocus -> if (mfocus.parent.theme.palette.light) mfocus.parent.theme.palette.onToolbar.light else mfocus.parent.theme.palette.onToolbar.dark,
		\mfocusgroup -> if (mfocusgroup.theme.palette.light) mfocusgroup.theme.palette.onToolbar.light else mfocusgroup.theme.palette.onToolbar.dark
	);
};
getFontStyle(parent : MaterialManagerOrFocus) -> MFontStyle {
	switchMaterialManagerOrFocus(
		parent,
		\manager -> manager.theme.type.body2,
		\mfocus -> mfocus.parent.theme.type.body2,
		\mfocusgroup -> mfocusgroup.theme.type.body2
	);
};

contrastingColor(parent : MaterialManagerOrFocus) -> int { if (getLightBackground(parent)) black else white };
contrastingMColor(parent : MaterialManagerOrFocus) -> MColor { MDefaultTextColor(getLightBackground(parent)) };
sameLightMColor(parent : MaterialManagerOrFocus) -> MColor { MDefaultTextColor(!getLightBackground(parent)) };

MThemeColor2MColor(parent : MaterialManagerOrFocus, color : MThemeColor) -> MColor {
	switch (color : MThemeColor) {
		MColor(__, __, __): color;
		MPrimaryColor(): getPrimaryColor(parent);
		MPrimaryVariantColor(): getPrimaryVariantColor(parent);
		MSecondaryColor(): getSecondaryColor(parent);
		MSecondaryVariantColor(): getSecondaryVariantColor(parent);
		MBackgroundColor(): getBackgroundColor(parent);
		MSurfaceColor(): getSurfaceColor(parent);
		MErrorColor(): getErrorColor(parent);
		MToolbarColor(): getToolbarColor(parent);
		MOnPrimaryColor(): getOnPrimaryColor(parent);
		MOnSecondaryColor(): getOnSecondaryColor(parent);
		MOnBackgroundColor(): getOnBackgroundColor(parent);
		MOnSurfaceColor(): getOnSurfaceColor(parent);
		MOnErrorColor(): getOnErrorColor(parent);
		MOnToolbarColor(): getOnToolbarColor(parent);
		MContastingTextColor(background): MTextMColor(MThemeColor2MColor(parent, background));
		MThemedColor(light, dark): if (getLightBackground(parent)) light else dark;
	}
}

materialThemeColors = [
	MPrimaryColor(),
	MPrimaryVariantColor(),
	MSecondaryColor(),
	MSecondaryVariantColor(),
	MBackgroundColor(),
	MSurfaceColor(),
	MErrorColor(),
	MToolbarColor(),
	MOnPrimaryColor(),
	MOnSecondaryColor(),
	MOnBackgroundColor(),
	MOnSurfaceColor(),
	MOnErrorColor(),
	MOnToolbarColor(),
	MContastingTextColor(MWhite()),
	MThemedColor(MWhite(), MBlack())
]

extractMColor(parent : MaterialManagerOrFocus, style : [flow], defaultColor : MThemeColor) -> MColor {
	colors : [MThemeColor] =
		fold(arrayPush(materialThemeColors, MWhite()), [], \acc, s ->
			if (length(acc) > 0)
				acc
			else
				extractStructMany(style, s)
		);

	MThemeColor2MColor(parent, if (length(colors) > 0) colors[0] else defaultColor);
}

tryExtractMColor(parent : MaterialManagerOrFocus, style : [flow]) -> Maybe<MColor> {
	fold(arrayPush(materialThemeColors, MWhite()), None(), \acc, s ->
		if (isSome(acc))
			acc
		else
			maybeMap(tryExtractStruct(style, s), \c -> MThemeColor2MColor(parent, c))
	);
}

replaceMThemeColor(style : [flow], color : MThemeColor) -> [flow] {
	arrayPush(removeAllStructsMany(style, arrayPush(materialThemeColors, MWhite())), color);
}

MThemeColor2int(parent : MaterialManagerOrFocus, color : MThemeColor) -> int {
	MColor2int(MThemeColor2MColor(parent, color))
}

MThemeFill(parent : MaterialManagerOrFocus, color : MThemeColor) -> Fill {
	Fill(MThemeColor2int(parent, color))
}

FMaterialShape(parent : MFocusGroup, style : [GraphicsStyle], component : string) -> (WidthHeight) -> FForm {
	shape = getShapeByComponent(parent, component);

	topLeft = parseMaterialShapeCorner(shape.defaultShape.tl);
	topRight = parseMaterialShapeCorner(shape.defaultShape.tr);
	bottomRight = parseMaterialShapeCorner(shape.defaultShape.br);
	bottomLeft = parseMaterialShapeCorner(shape.defaultShape.bl);

	\wh -> {
		width = wh.width;
		height = wh.height;

		if (width == 0.0 || height == 0.0) {
			FEmpty()
		} else {
			topLeftR = topLeft(wh);
			topRightR = topRight(wh);
			bottomRightR = bottomRight(wh);
			bottomLeftR = bottomLeft(wh);

			if (topLeftR == topRightR && topRightR == bottomRightR && bottomRightR == bottomLeftR) {
				customFRoundedRect(width, height, topLeftR.first, topRightR.first, bottomRightR.first, bottomLeftR.first, style);
			} else {
				w = width;
				h = height;

				r1 = topLeftR.first;
				r2 = topRightR.first;
				r3 = bottomRightR.first;
				r4 = bottomLeftR.first;

				sqrt2 = sqrt(2.0);
				n1 = 1.0 / sqrt2;
				n2 = sqrt2 - 1.0;

				FGraphics(
					const(concatA([
						[
							MoveTo(r1, 0.0),
							LineTo(w - r2, 0.0)
						],
						if (topRightR.second && r2 > 0.0)
							[
								CubicBezierTo(
									(n1 * r2) + w - r2,
									(-n1 * r2) + r2,
									(n2 * r2) + w - r2,
									(-r2)  + r2
								),
								CubicBezierTo(
									w,
									r2,
									w,
									-n2 * r2 + r2
								)

							]
						else
							[
								LineTo(w, r2)
							],
						[
							LineTo(w, h - r3)
						],
						if (bottomRightR.second && r3 > 0.0)
							[
								CubicBezierTo(
									(n1 * r3) + w - r3,
									(n1 * r3) + h - r3,
									w,
									(n2 * r3) + h - r3,
								),
								CubicBezierTo(
									w - r3,
									h,
									(n2 * r3) + w - r3,
									h
								)
							]
						else
							[
								LineTo(w - r3, h)
							],
						[
							LineTo(r4, h)
						],
						if (bottomLeftR.second && r4 > 0.0)
							[
								CubicBezierTo(
									-n1 * r4 + r4,
									n1 * r4 + h - r4,
									(-n2 * r4) + r4,
									h
								),
								CubicBezierTo(
									0.0,
									h - r4,
									0.0,
									(n2 * r4) + h - r4,
								)
							]
						else
							[
								LineTo(0.0, h - r4)
							],
						[
							LineTo(0.0, r1)
						],
						if (topLeftR.second && r1 > 0.0)
							[
								CubicBezierTo(
									(-n1 * r1) + r1,
									(-n1 * r1) + r1,
									0.0,
									(-n2 * r1) + r1
								),
								CubicBezierTo(
									r1,
									0.0,
									(-n2 * r1) + r1,
									0.0
								)
							]
						else
							[
								LineTo(r1, 0.0)
							]
					])),
					const(style)
				)
			}
		}
	}
}

MShape(parent : MFocusGroup, style : [TGraphicsStyle], size : Tropic, component : string) -> Tropic {
	TransformTAcc(\t2a, pi, ss, mo -> {
		b = t2a(size, pi, ss, true);
		container = FMaterialShape(parent, style |> tgraphicsStyle2graphicsStyle, component);

		TAcc(b with form =
			FMutable(fselect(fwidthheight(b.metrics.width, b.metrics.height), container |> FLift))
		)
	})
}

MShapeFrame(parent : MFocusGroup, style : [TGraphicsStyle], content : Tropic, component : string) -> Tropic {
	TCopySize(
		content,
		\tr -> MShape(parent, style, tr, component),
		false
	)
}

makeMaterialTheme(lightBackground : bool, primaryColor : MColor, secondaryColor : MColor) -> MaterialTheme {
	onPrimaryColor = MTextMColor(primaryColor);
	onSecondaryColor = MTextMColor(primaryColor);

	MaterialTheme(defaultMaterialTheme with palette =
		MaterialPalette(defaultMaterialTheme.palette with
			light = lightBackground,
			primary = MThemedColor(primaryColor, primaryColor),
			primaryVariant = MThemedColor(primaryColor, primaryColor),
			secondary = MThemedColor(secondaryColor, secondaryColor),
			secondaryVariant = MThemedColor(secondaryColor, secondaryColor),
			toolbar = MThemedColor(primaryColor, primaryColor),
			onPrimary = MThemedColor(onPrimaryColor, onPrimaryColor),
			onSecondary = MThemedColor(onSecondaryColor, onSecondaryColor),
			onToolbar = MThemedColor(onPrimaryColor, onPrimaryColor)
		)
	)
}

MLightTheme(theme : MaterialTheme, lightBackground : bool) -> MaterialTheme {
	if (lightBackground != theme.palette.light) {
		MaterialTheme(theme with palette = MaterialPalette(theme.palette with light = lightBackground))
	} else {
		theme
	}
}

MaterialType2MFontStyle(parent : MFocusGroup, type : MaterialType) -> MFontStyle {
	switch (type : MaterialType) {
		MH1(): parent.theme.type.h1;
		MH2(): parent.theme.type.h2;
		MH3(): parent.theme.type.h3;
		MH4(): parent.theme.type.h4;
		MH5(): parent.theme.type.h5;
		MH6(): parent.theme.type.h6;
		MSubtitle1(): parent.theme.type.subtitle1;
		MSubtitle2(): parent.theme.type.subtitle2;
		MBody1(): parent.theme.type.body1;
		MBody2(): parent.theme.type.body2;
		MButton1(): parent.theme.type.button;
		MCaption1(): parent.theme.type.caption;
		MOverline1(): parent.theme.type.overline;
	}
}