import ds/array_diff;

printInfo(title : string, arr : [?], inline : bool) -> void {
	println(title + ":");
	if (inline) {
		println("  " + toString(arr));
	} else {
		iteri(arr, \i, a : ? -> println("  " + lpad(i2s(i), " ", 3) + " " + toString(a)));
	}
}

main() {
	fullProtocol = false;
	println("Running static tests...");
	assertEquals(arrayDiff([], [], fullProtocol), []);
	assertEquals(arrayDiff([0], [0], fullProtocol), []);
	assertEquals(arrayDiff([0,1], [0,1], fullProtocol), []);

	assertEquals(arrayDiff([], [0], fullProtocol), [ArrayInsert(0,0,0)]);
	assertEquals(arrayDiff([], [0,1], fullProtocol), [ArrayInsert(0,1,1), ArrayInsert(0,0,0)]);
	assertEquals(arrayDiff([], [0,1,2], fullProtocol), [ArrayInsert(0,2,2), ArrayInsert(0,1,1), ArrayInsert(0,0,0)]);

	assertEquals(arrayDiff([0], [0,1,2], fullProtocol), [ArrayInsert(1,2,2), ArrayInsert(1,1,1)]);
	assertEquals(arrayDiff([1], [0,1,2], fullProtocol), [ArrayInsert(1,2,2), ArrayInsert(0,0,0)]);

	assertEquals(arrayDiff([0], [], fullProtocol), [ArrayRemove(0,0)]);
	assertEquals(arrayDiff([0,1], [0], fullProtocol), [ArrayRemove(1,1)]);
	assertEquals(arrayDiff([0,1], [1], fullProtocol), [ArrayRemove(0,0)]);

	assertEquals(arrayDiff([0], [1], fullProtocol), [ArrayReplace(0,0,1)]);
	assertEquals(arrayDiff([0,1,2], [2,1,0], fullProtocol), [ArrayReplace(2,2,0), ArrayReplace(0,0,2)]);
	assertEquals(arrayDiff([0,1,2], [2,2,2], fullProtocol), [ArrayReplace(1,1,2), ArrayReplace(0,0,2)]);
	assertEquals(arrayDiff([0,1,2], [2,2,2], fullProtocol), [ArrayReplace(1,1,2), ArrayReplace(0,0,2)]);

	assertEquals(arrayDiff([0,1,2,3], [0,2,4], fullProtocol), [ArrayReplace(3,2,4), ArrayRemove(1,1)]);
	assertEquals(arrayDiff([0,1,2,3], [0,2,2,3,5], fullProtocol), [ArrayInsert(4,4,5), ArrayReplace(1,1,2)]);
	assertEquals(arrayDiff([0,1,2,3], [0,2,2,3,5], fullProtocol), [ArrayInsert(4,4,5), ArrayReplace(1,1,2)]);
	assertEquals(arrayDiff([0,1,2,3,4], [1,2,3,5,6], fullProtocol), [ArrayReplace(4,4,6), ArrayInsert(4,3,5), ArrayRemove(0,0)]);
	println("   PASSED");

	applyProtocolWithChange = \theSource, theProtocol ->
		applyProtocolWithSwapp(theSource, theProtocol,
			\newValue ->  {//insertFn
				"INS[" + newValue + "]"
			},
			\oldValue, newValue -> { // replaceFn
				"REPLACE[" + oldValue + " -> " + newValue + "]"
			},
			\oldValue -> { // removeFn
				Some("DEL[" + oldValue + "]")
			},
			\p : Pair<string, string> -> { // swapFn
				Pair(
					"SWAP[" + p.first + " -> " + p.second + "]",
					"SWAP[" + p.first + " <- " + p.second + "]"
				)
			}
		);

	a2s = \a -> map(a, toString);

	testData : [Pair<[string], [string]>] = [
		Pair(
			["The", " ", "boy", " ", "walked", " ", "down", " ", "the", " ", "street", "." ],
			["The", " ", "boy", " ", "is", " ", "walks", " ", "down", " ", "the", " ", "street", "." ]
		),
		Pair(
			["The", " ", "boy walked", " ", "down", " ", "the", " ", "street", "."],
			["The", " ", "boy is walks down", " ", "the", " ", "street", "."]
		),
		Pair(
			[0, 1, 2, 1, 4,  1, 6,        1, 8, 1, 10, 11, 12] |> a2s,
			[0, 1, 2, 1, 21, 1, 22, 1, 6, 1, 8, 1, 10, 11, 12] |> a2s
		)
	];

	randomInt = \upto : int-> {
		floor(random() * i2d(upto))
	}
	minLength = 3;
	maxLength = 100;

	randomTestData : [Pair<[string], [string]>] =
		generate(0, 1000, \__ -> {
			Pair(
				generate(0, minLength + randomInt(maxLength), \i -> i2s(randomInt(i))),
				generate(0, minLength + randomInt(maxLength), \i -> i2s(randomInt(i)))
			)
		}
	);

	allTests = concat(testData, randomTestData);

	// tests1 = [
	// 	Pair(
	// 		["0", "0", "1", "2", "3", "4", "5", "1", "1", "4"],
	// 		["0", "0", "0", "1", "3", "2", "4", "4", "4", "1"]
	// 	)
	// ];

	processTests = \tests, swapp : bool -> {
		println("Running" + (if (swapp) " " else " NO ") + "SWAPP " + i2s(length(tests)) + " random tests...");
		iteri(tests, \i, t -> {
			source = t.first;
			target = t.second;
			protocol = if (swapp) arrayDiffWithSwapp(source, target, false) else arrayDiff(source, target, false);

			restoredTarget = applyProtocolInvariant(source, protocol);
			targetWithChanges = applyProtocolWithChange(source, protocol);

			if (target != restoredTarget) {
				println("== " + i2s(i+1));
				println("Target != restoredTarget");
				printInfo("source", source, true);
				printInfo("target", target, true);
				printInfo("restoredTarget", restoredTarget, true);
				printInfo("protocol", protocol, false);
				printInfo("targetWithChanges", targetWithChanges, true);
				fail("Test failed.");
			}
		});

		println("   PASSED");
	}

	processTests(allTests, false);
	processTests(allTests, true);
	println("");

	quit(0);
}
