import ds/heckel_diff;
import ds/array_diff;
import ds/dlist;
import fusion;

export {
	DynamicArray<?> ::= DynamicArrayContainer<?>, DynamicArrayModifier<?>;
		DynamicArrayModifier<?> ::= DynamicArrayMap<?>, DynamicArrayMapi<?>, DynamicArraySubMap<?>, DynamicArraySubMapi<?>, DynamicArrayDisposableMap<?>,
			DynamicArrayFilter<?>, DynamicArrayConcat<?>, DynamicArraySubrange<?>, DynamicArrayOrder<?>, DynamicArrayMerge<?>, DynamicArrayConstruct<?>;

		DynamicArrayContainer(
			mutable values : [?],
			subscribers : DList<(HeckelOperationSimple<?>) -> void>
		);

		DynamicArrayMap(
			container : DynamicArray<flow>,
			fn : (flow) -> ?,
			mutable values : [?],
			subscribers : DList<(HeckelOperationSimple<?>) -> void>,
			mutable dispose : [() -> void]
		);

		DynamicArrayMapi(
			container : DynamicArray<flow>,
			fn : (int, flow) -> ?,
			mutable values : [?],
			subscribers : DList<(HeckelOperationSimple<?>) -> void>,
			mutable dispose : [() -> void]
		);

		DynamicArraySubMap(
			container : DynamicArray<flow>,
			fn : (flow) -> Transform<?>,
			mutable values : [?],
			subscribers : DList<(HeckelOperationSimple<?>) -> void>,
			mutable dispose : [() -> void]
		);

		DynamicArraySubMapi(
			container : DynamicArray<flow>,
			fn : (Transform<int>, flow) -> Transform<?>,
			mutable values : [?],
			subscribers : DList<(HeckelOperationSimple<?>) -> void>,
			mutable dispose : [() -> void]
		);

		DynamicArrayDisposableMap(
			container : DynamicArray<flow>,
			fn : (flow) -> Disposable<?>,
			mutable values : [?],
			subscribers : DList<(HeckelOperationSimple<?>) -> void>,
			mutable dispose : [() -> void]
		);

		DynamicArrayFilter(
			container : DynamicArray<?>,
			fn : (?) -> bool,
			mutable values : [?],
			subscribers : DList<(HeckelOperationSimple<?>) -> void>,
			mutable dispose : [() -> void]
		);

		DynamicArrayConcat(
			container1 : DynamicArray<?>,
			container2 : DynamicArray<?>,
			mutable values : [?],
			subscribers : DList<(HeckelOperationSimple<?>) -> void>,
			mutable dispose : [() -> void]
		);

		DynamicArraySubrange(
			container : DynamicArray<flow>,
			index : Transform<int>,
			length : Transform<int>,
			mutable values : [?],
			subscribers : DList<(HeckelOperationSimple<?>) -> void>,
			mutable dispose : [() -> void]
		);

		DynamicArrayOrder(
			container : DynamicArray<flow>,
			order : DynamicArray<int>,
			mutable values : [?],
			subscribers : DList<(HeckelOperationSimple<?>) -> void>,
			mutable dispose : [() -> void]
		);

		DynamicArrayMerge(
			container : DynamicArray<DynamicArray<?>>,
			mutable values : [?],
			subscribers : DList<(HeckelOperationSimple<?>) -> void>,
			mutable dispose : [() -> void]
		);

		DynamicArrayConstruct(
			container : DynamicArray<?>,
			fn : [() -> () -> void],
			mutable values : [?],
			subscribers : DList<(HeckelOperationSimple<?>) -> void>,
			mutable dispose : [() -> void]
		);

			HeckelOperationSimple<?> ::= HeckelInsert<?>, HeckelDelete;

	makeDynamicArray(values : [?]) -> DynamicArray<?>;
	makeDynamicArrayFromTransform(a : Transform<[?]>) -> DynamicArray<?>;
	subscribeDynamicArray(a : DynamicArray<?>, fn : (HeckelOperationSimple<?>) -> void) -> () -> void;
	listenDynamicArray(a : DynamicArray<?>, fn : (HeckelOperationSimple<?>) -> void) -> () -> void;

	insertDynamicArray(a : DynamicArray<?>, i : int, v : ?) -> void;
	// moveDynamicArray(a : DynamicArray<?>, f : int, t : int) -> void;
	deleteDynamicArray(a : DynamicArray<?>, i : int) -> void;
	replaceDynamicArray(a : DynamicArray<?>, i : int, v : ?) -> void;
	appendDynamicArray(a : DynamicArray<?>, v : ?) -> void;
	nextDynamicArray(a : DynamicArray<?>, b : [?]) -> void;

	mapDynamicArray(a : DynamicArray<?>, fn : (?) -> ??) -> DynamicArray<??>;
	mapiDynamicArray(a : DynamicArray<?>, fn : (int, ?) -> ??) -> DynamicArray<??>;
	submapDynamicArray(a : DynamicArray<?>, fn : (?) -> Transform<??>) -> DynamicArray<??>;
	submapiDynamicArray(a : DynamicArray<?>, fn : (Transform<int>, ?) -> Transform<??>) -> DynamicArray<??>;
	dispmapDynamicArray(a : DynamicArray<?>, fn : (?) -> Disposable<??>) -> DynamicArray<??>;

	filterDynamicArray(a : DynamicArray<?>, fn : (?) -> bool) -> DynamicArray<?>;
	subfilterDynamicArray(a : DynamicArray<?>, fn : (?) -> Transform<bool>) -> DynamicArray<?>;
	filtermapDynamicArray(a : DynamicArray<?>, fn : (?) -> Maybe<??>) -> DynamicArray<??>;
	filtersubmapDynamicArray(a : DynamicArray<?>, fn : (?) -> Transform<Maybe<??>>) -> DynamicArray<??>;
	subfiltermapDynamicArray(a : DynamicArray<?>, fn : (?) -> Maybe<Transform<??>>) -> DynamicArray<??>;

	concatDynamicArray(a1 : DynamicArray<?>, a2 : DynamicArray<?>) -> DynamicArray<?>;
	subrangeDynamicArray(a : DynamicArray<?>, index : Transform<int>, len : Transform<int>) -> DynamicArray<?>;
	orderDynamicArray(a : DynamicArray<?>, order : DynamicArray<int>) -> DynamicArray<?>;
	mergeDynamicArray(a : DynamicArray<DynamicArray<?>>) -> DynamicArray<?>;
	constructDynamicArray(a : DynamicArray<?>, fn : [() -> () -> void]) -> DynamicArray<?>;

	findDynamicArray(a : DynamicArray<?>, fn : (?) -> bool) -> Transform<Maybe<?>>;
	findmapDynamicArray(a : DynamicArray<?>, fn : (?) -> Maybe<??>) -> Transform<Maybe<??>>;
	findsubmapDynamicArray(a : DynamicArray<?>, fn : (?) -> Transform<Maybe<??>>) -> Transform<Maybe<??>>;

	// foldDynamicArray(a : DynamicArray<?>, fn : (acc : ??, v : ?) -> ??) -> Transform<??>;

	lengthDynamicArray(a : DynamicArray<?>) -> Transform<int>;
	transformDynamicArray(a : DynamicArray<?>) -> Transform<[?]>;
	sizeDynamicArray(a : DynamicArray<?>) -> int;
	getDynamicArrayValue(a : DynamicArray<?>) -> [?];
	getDynamicArrayValueAt(a : DynamicArray<?>, index : int) -> ?;

	applyFilterDynamicArray(a : DynamicArray<?>, fn : (?) -> bool) -> void;
}

makeDynamicArray(values : [?]) -> DynamicArray<?> {
	DynamicArrayContainer(values, makeDList());
}

makeDynamicArrayFromTransform(a : Transform<[?]>) -> DynamicArray<?> {
	da = makeDynamicArray(fgetValue(a));

	constructDynamicArray(
		da,
		[makeSubscribe2(a, \aa -> nextDynamicArray(da, aa))]
	)
}

subscribeDynamicArray(a : DynamicArray<?>, fn : (HeckelOperationSimple<?>) -> void) -> () -> void {
	dispose = listenDynamicArray(a, fn);
	iteri(getDynamicArrayValue(a), \i, aa -> fn(HeckelInsert(i, aa)));
	dispose;
}

listenDynamicArray(a : DynamicArray<?>, fn : (HeckelOperationSimple<?>) -> void) -> () -> void {
	linkDynamicArray(a);
	u = listenDynamicArrayContainer(a, fn);

	\ -> {
		u();
		unlinkDynamicArray(a);
	};
}

listenDynamicArrayContainer(a : DynamicArray<?>, fn : (HeckelOperationSimple<?>) -> void) -> () -> void {
	n = pushDList(a.subscribers, fn);

	\ -> {
		removeDList(a.subscribers, n);
	}
}

linkDynamicArray(a : DynamicArray<?>) -> void {
	if (emptyDList(a.subscribers)) {
		switch (a : DynamicArray<?>) {
			DynamicArrayMap(__, __, __, __, __) : {
				a.dispose ::=
					[
						listenDynamicArray(a.container, \op -> {
							switch (op : HeckelOperationSimple<?>) {
								HeckelInsert(i, v): {
									insertDynamicArray(a, i, a.fn(v));
								}
								// HeckelMove(f, t): {
								// 	moveDynamicArray(a, f, t);
								// }
								HeckelDelete(i): {
									deleteDynamicArray(a, i);
								}
							}
						})
					];
				a.values ::= map(a.container.values, a.fn);
			}
			DynamicArrayMapi(__, __, __, __, __) : {
				a.dispose ::=
					[
						listenDynamicArray(a.container, \op -> {
							switch (op : HeckelOperationSimple<?>) {
								HeckelInsert(i, v): {
									insertDynamicArray(a, i, a.fn(i, v));
									fori(i + 1, sizeDynamicArray(a.container) - 1, \j -> {
										replaceDynamicArray(a, j, a.fn(i, getDynamicArrayValueAt(a.container, j)));
									});
								}
								// HeckelMove(f, t): {
								// 	moveDynamicArray(a, f, t);
								// }
								HeckelDelete(i): {
									deleteDynamicArray(a, i);
									fori(i, sizeDynamicArray(a.container) - 1, \j -> {
										replaceDynamicArray(a, j, a.fn(i, getDynamicArrayValueAt(a.container, j)));
									});
								}
							}
						})
					];
				a.values ::= mapi(a.container.values, a.fn);
			}
			DynamicArraySubMap(__, __, __, __, __) : {
				disposers = ref [];
				a.dispose ::=
					[
						listenDynamicArray(a.container, \op -> {
							switch (op : HeckelOperationSimple<?>) {
								HeckelInsert(i, v): {
									r = a.fn(v);
									disposers := insertArray(^disposers, i, makeSubscribe2(r, \vv -> replaceDynamicArray(a, i, vv))());
									insertDynamicArray(a, i, fgetValue(r));
								}
								// HeckelMove(f, t): {
								// 	moveDynamicArray(a, f, t);
								// }
								HeckelDelete(i): {
									^disposers[i];
									disposers := removeIndex(^disposers, i);
									deleteDynamicArray(a, i);
								}
							}
						}),
						\ -> {
							applyall(^disposers);
							disposers := [];
						}
					];

				valuesDisposers = mapi(a.container.values, \i, v -> {
					r = a.fn(v);
					Disposable(r, makeSubscribe2(r, \vv -> replaceDynamicArray(a, i, vv))());
				});

				disposers := map(valuesDisposers, \v -> v.dispose);
				a.values ::= map(valuesDisposers, \v -> fgetValue(v.value));
			}
			DynamicArraySubMapi(__, __, __, __, __) : {
				disposers = ref [];
				indexes = ref [];

				a.dispose ::=
					[
						listenDynamicArray(a.container, \op -> {
							switch (op : HeckelOperationSimple<?>) {
								HeckelInsert(i, v): {
									index = make(i);
									r = a.fn(index, v);
									indexes := insertArray(^indexes, i, index);
									disposers := insertArray(^disposers, i, makeSubscribe2(r, \vv -> replaceDynamicArray(a, i, vv))());
									fori(i + 1, length(^indexes) - 1, \j -> next(^indexes[j], j));

									insertDynamicArray(a, i, fgetValue(r));
								}
								// HeckelMove(f, t): {
								// 	moveDynamicArray(a, f, t);
								// }
								HeckelDelete(i): {
									^disposers[i];
									indexes := removeIndex(^indexes, i);
									disposers := removeIndex(^disposers, i);
									fori(i, length(^indexes) - 1, \j -> next(^indexes[j], j));

									deleteDynamicArray(a, i);
								}
							}
						}),
						\ -> {
							applyall(^disposers);
							disposers := [];
							indexes := [];
						}
					];

				valuesDisposers = mapi(a.container.values, \i, v -> {
					index = make(i);
					r = a.fn(index, v);
					indexes := insertArray(^indexes, i, index);
					Disposable(r, makeSubscribe2(r, \vv -> replaceDynamicArray(a, i, vv))());
				});

				disposers := map(valuesDisposers, \v -> v.dispose);
				a.values ::= map(valuesDisposers, \v -> fgetValue(v.value));
			}
			DynamicArrayDisposableMap(__, __, __, __, __) : {
				disposers = ref [];
				a.dispose ::=
					[
						listenDynamicArray(a.container, \op -> {
							switch (op : HeckelOperationSimple<?>) {
								HeckelInsert(i, v): {
									r = a.fn(v);
									disposers := insertArray(^disposers, i, r.dispose);
									insertDynamicArray(a, i, r.value);
								}
								// HeckelMove(f, t): {
								// 	moveDynamicArray(a, f, t);
								// }
								HeckelDelete(i): {
									^disposers[i];
									disposers := removeIndex(^disposers, i);
									deleteDynamicArray(a, i);
								}
							}
						}),
						\ -> {
							applyall(^disposers);
							disposers := [];
						}
					];

				valuesDisposers = map(a.container.values, \v -> a.fn(v));

				disposers := map(valuesDisposers, \v -> v.dispose);
				a.values ::= map(valuesDisposers, \v -> v.value);
			}
			DynamicArrayFilter(__, __, __, __, __) : {
				result = ref [];
				a.dispose ::=
					[
						listenDynamicArray(a.container, \op -> {
							switch (op : HeckelOperationSimple<?>) {
								HeckelInsert(i, v): {
									if (a.fn(v)) {
										result := insertArray(^result , i, true);
										insertDynamicArray(a, countA(subrange(^result , 0, i), idfn), v);
									} else {
										result := insertArray(^result , i, false);
									}
								}
								// HeckelMove(f, t): {
								// 	result := moveElement(^result , f, t);
								// 	moveDynamicArray(a, f, t);
								// }
								HeckelDelete(i): {
									if (^result [i]) {
										result := removeIndex(^result , i);
										deleteDynamicArray(a, countA(subrange(^result , 0, i), idfn));
									} else {
										result := removeIndex(^result , i);
									}
								}
							}
						})
					];
				result := map(a.container.values, a.fn);
				a.values ::= filtermapi(a.container.values, \i, v -> if (^result[i]) Some(v) else None());
			}
			DynamicArrayConcat(__, __, __, __, __) : {
				a.dispose ::=
					[
						listenDynamicArray(a.container1, \op -> {
							switch (op : HeckelOperationSimple<?>) {
								HeckelInsert(i, v): {
									insertDynamicArray(a, i, v);
								}
								// HeckelMove(f, t): {
								// 	moveDynamicArray(a, f, t);
								// }
								HeckelDelete(i): {
									deleteDynamicArray(a, i);
								}
							}
						}),
						listenDynamicArray(a.container2, \op -> {
							switch (op : HeckelOperationSimple<?>) {
								HeckelInsert(i, v): {
									insertDynamicArray(a, i + sizeDynamicArray(a.container1), v);
								}
								// HeckelMove(f, t): {
								// 	moveDynamicArray(a, f + length((a.container1).values), t + length((a.container1).values));
								// }
								HeckelDelete(i): {
									deleteDynamicArray(a, i + sizeDynamicArray(a.container1));
								}
							}
						})
					];
				a.values ::= concat(a.container1.values, a.container2.values);
			}
			DynamicArraySubrange(__, __, __, __, __, __) : {
				a.dispose ::=
					[
						make2SubscribeUns(
							a.index,
							a.length,
							\ind, len ->
								[
									listenDynamicArray(a.container, \op -> {
										switch (op : HeckelOperationSimple<?>) {
											HeckelInsert(i, v): {
												if (i < ind + len) {
													if (i >= ind) {
														replaceDynamicArray(a, i - ind, v);
													} else {
														deleteDynamicArray(a, len - 1);
														insertDynamicArray(a, 0, a.container.values[ind]);
													}
												}
											}
											// HeckelMove(f, t): { // TODO
											// 	if (f >= ind && f < ind + len) {
											// 		if (t >= ind && t < ind + len) {
											// 			moveDynamicArray(a, f - ind, t - ind);
											// 		} else {
											// 			deleteDynamicArray(a, f - ind);
											// 		}
											// 	} else {
											// 		if (t >= ind && t < ind + len) {
											// 			insertDynamicArray(a, t - ind, a.container.values[f]);
											// 		}
											// 	}
											// }
											HeckelDelete(i): {
												if (i < ind + len) {
													deleteDynamicArray(a, max(i - ind, 0));
													insertDynamicArray(a, len - 1, a.container.values[ind + len - 1]);
												}
											}
										}
									})
								]
						)()
					];
				a.values ::= subrange(a.container.values, fgetValue(a.index), fgetValue(a.length));
			}
			DynamicArrayOrder(__, __, __, __, __) : {
				a.dispose ::=
					[
						listenDynamicArray(a.container, \op -> {
							switch (op : HeckelOperationSimple<?>) {
								HeckelInsert(i, v): {
									order = getDynamicArrayValue(a.order);

									maybeApply(findi(order, \o -> o == i), \index -> {
										fori(index, length(order) - 1, \j ->
											replaceDynamicArray(a, j, getDynamicArrayValueAt(a.container, order[j]))
										);
									});
								}
								// HeckelMove(f, t): {
								// 	moveDynamicArray(a, f, t);
								// }
								HeckelDelete(i): {
									order = getDynamicArrayValue(a.order);

									maybeApply(findi(getDynamicArrayValue(a.order), \o -> o == i), \index -> {
										fori(index, length(order) - 1, \j ->
											replaceDynamicArray(a, j, getDynamicArrayValueAt(a.container, order[j]))
										);
									});
								}
							}
						}),
						listenDynamicArray(a.order, \op -> {
							switch (op : HeckelOperationSimple<?>) {
								HeckelInsert(i, v): {
									insertDynamicArray(a, i, getDynamicArrayValueAt(a.container, v));
								}
								// HeckelMove(f, t): {
								// 	moveDynamicArray(a, f, t);
								// }
								HeckelDelete(i): {
									deleteDynamicArray(a, i);
								}
							}
						})
					];

				a.values ::= fold(getDynamicArrayValue(a.order), [], \acc, i ->
					if (i >= 0 && i < sizeDynamicArray(a.container))
						arrayPush(acc, getDynamicArrayValueAt(a.container, i))
					else
						acc
				);
			}
			DynamicArrayMerge(__, __, __, __) : {
				disposers = ref [];
				sizes = ref [];
				indexes = ref [];

				a.dispose ::=
					[
						listenDynamicArray(a.container, \dop -> {
							switch (dop : HeckelOperationSimple<DynamicArray<?>>) {
								HeckelInsert(j, dv): {
									index = make(j);
									indexes := insertArray(^indexes, j, index);
									sizes := insertArray(^sizes, j, sizeDynamicArray(dv));
									disposers := insertArray(^disposers, j,
										listenDynamicArray(dv, \op -> {
											switch (op : HeckelOperationSimple<?>) {
												HeckelInsert(i, v): {
													sizes := replace(^sizes, getValue(index), ^sizes[getValue(index)] + 1);
													insertDynamicArray(a, sum(subrange(^sizes, 0, getValue(index))) + i, v);
												}
												// HeckelMove(f, t): {
												// 	moveDynamicArray(a, f, t);
												// }
												HeckelDelete(i): {
													sizes := replace(^sizes, getValue(index), ^sizes[getValue(index)] - 1);
													deleteDynamicArray(a, sum(subrange(^sizes, 0, getValue(index))) + i);
												}
											}
										})
									);
									fori(j + 1, length(^indexes) - 1, \k -> next(^indexes[k], k));

									iteri(getDynamicArrayValue(dv), \i, v -> insertDynamicArray(a, sum(subrange(^sizes, 0, getValue(index))) + i, v));
								}
								// HeckelMove(f, t): {
								// 	moveDynamicArray(a, f, t);
								// }
								HeckelDelete(j): {
									index = sum(subrange(^sizes, 0, getValue(^indexes[j])));
									size = ^sizes[j];

									^disposers[j];
									indexes := removeIndex(^indexes, j);
									sizes := removeIndex(^sizes, j);
									disposers := removeIndex(^disposers, j);
									fori(j, length(^indexes) - 1, \k -> next(^indexes[k], k));

									fori(index, index + size - 1, \i -> deleteDynamicArray(a, i));
								}
							}
						}),
						\ -> {
							applyall(^disposers);
							disposers := [];
							indexes := [];
							sizes := [];
						}
					];

				valuesDisposers = mapi(a.container.values, \j, dv -> {
					index = make(j);
					indexes := insertArray(^indexes, j, index);
					sizes := insertArray(^sizes, j, sizeDynamicArray(dv));

					Disposable(
						getDynamicArrayValue(dv),
						listenDynamicArray(dv, \op -> {
							switch (op : HeckelOperationSimple<?>) {
								HeckelInsert(i, v): {
									sizes := replace(^sizes, getValue(index), ^sizes[getValue(index)] + 1);
									insertDynamicArray(a, sum(subrange(^sizes, 0, getValue(index))) + i, v);
								}
								// HeckelMove(f, t): {
								// 	moveDynamicArray(a, f, t);
								// }
								HeckelDelete(i): {
									sizes := replace(^sizes, getValue(index), ^sizes[getValue(index)] - 1);
									deleteDynamicArray(a, sum(subrange(^sizes, 0, getValue(index))) + i);
								}
							}
						})
					)
				});

				disposers := map(valuesDisposers, \v -> v.dispose);
				a.values ::= concatA(map(valuesDisposers, \v -> v.value));
			}
			DynamicArrayConstruct(__, __, __, __, __) : {
				a.dispose ::= arrayPush(map(a.fn, apply0), listenDynamicArray(a.container, \__ -> a.values ::= getDynamicArrayValue(a.container)));
				a.values ::= getDynamicArrayValue(a.container);
			}
			default: {}
		}
	}
}

unlinkDynamicArray(a : DynamicArray<?>) -> void {
	if (emptyDList(a.subscribers)) {
		switch (a : DynamicArray<?>) {
			DynamicArrayModifier(): {
				applyall(a.dispose);
				a.dispose ::= [];
			}
			default : {}
		}
	}
}

insertDynamicArray(a : DynamicArray<?>, i : int, v : ?) -> void {
	ii = min(sizeDynamicArray(a), max(i, 0));

	if (length(a.values) == ii || a.values[ii] != v) {
		a.values ::= insertArray(a.values, ii, v);

		if (!emptyDList(a.subscribers)) {
			iterDList(a.subscribers, \fn -> fn(HeckelInsert(ii, v)));
		}
	}
}

// moveDynamicArray(a : DynamicArray<?>, f : int, t : int) -> void {
// 	tt = min(sizeDynamicArray(a) - 1, max(t, 0));

// 	if (existsIndex(a.values, f) && f != tt) {
// 		a.values ::= moveElement(a.values, f, tt);

// 		if (!emptyDList(a.subscribers)) {
// 			// iterDList(a.subscribers, \fn -> fn(HeckelMove(f, tt)));
// 		}
// 	}
// }

deleteDynamicArray(a : DynamicArray<?>, i : int) -> void {
	if (existsIndex(a.values, i)) {
		a.values ::= removeIndex(a.values, i);

		if (!emptyDList(a.subscribers)) {
			iterDList(a.subscribers, \fn -> fn(HeckelDelete(i)));
		}
	}
}

replaceDynamicArray(a : DynamicArray<?>, i : int, v : ?) -> void {
	ii = min(sizeDynamicArray(a), max(i, 0));

	if (length(a.values) == ii || a.values[ii] != v) {
		deleteDynamicArray(a, ii);
		insertDynamicArray(a, ii, v);
	}
}

appendDynamicArray(a : DynamicArray<?>, v : ?) -> void {
	insertDynamicArray(a, sizeDynamicArray(a), v);
}

nextDynamicArray(a : DynamicArray<?>, b : [?]) -> void {
	aa = getDynamicArrayValue(a);
	iter(heckelDiff(aa, b), \op -> {
		// println("nextDA: " + toString(op));

		switch (op : HeckelOperation<?>) {
			HeckelInsert(i, v): {
				insertDynamicArray(a, i, v);
			}
			HeckelMove(f, t): {
				// moveDynamicArray(a, f, t);
			}
			HeckelDelete(i): {
				printCallstack();
				deleteDynamicArray(a, i);
			}
		}
	});
}

nextDynamicArrayDiff(a : DynamicArray<?>, b : [?]) -> void {
	aa = getDynamicArrayValue(a);
	iter(arrayDiff(aa, b, false), \op -> {
		println("nextDA: " + toString(op));

		switch (op : ArrayOperation<?>) {
			ArrayNop(oldindex, newindex): {}
			ArrayInsert(oldindex, newindex, value): insertDynamicArray(a, oldindex, value);
			ArrayReplace(oldindex, newindex, value): replaceDynamicArray(a, oldindex, value);
			ArrayRemove(oldindex, newindex): deleteDynamicArray(a, oldindex);
		}
	});
}

mapDynamicArray(a : DynamicArray<?>, fn : (?) -> ??) -> DynamicArray<??> {
	DynamicArrayMap(a, fn, [], makeDList(), []);
}

mapiDynamicArray(a : DynamicArray<?>, fn : (int, ?) -> ??) -> DynamicArray<??> {
	DynamicArrayMapi(a, fn, [], makeDList(), []);
}

submapDynamicArray(a : DynamicArray<?>, fn : (?) -> Transform<??>) -> DynamicArray<??> {
	DynamicArraySubMap(a, fn, [], makeDList(), []);
}

submapiDynamicArray(a : DynamicArray<?>, fn : (Transform<int>, ?) -> Transform<??>) -> DynamicArray<??> {
	DynamicArraySubMapi(a, fn, [], makeDList(), []);
}

dispmapDynamicArray(a : DynamicArray<?>, fn : (?) -> Disposable<??>) -> DynamicArray<??> {
	DynamicArrayDisposableMap(a, fn, [], makeDList(), []);
}

filterDynamicArray(a : DynamicArray<?>, fn : (?) -> bool) -> DynamicArray<?> {
	DynamicArrayFilter(a, fn, [], makeDList(), []);
}

subfilterDynamicArray(a : DynamicArray<?>, fn : (?) -> Transform<bool>) -> DynamicArray<?> {
	filtermapDynamicArray(submapDynamicArray(a, \v -> fif(fn(v), const(Some(v)), const(None()))), idfn);
}

filtermapDynamicArray(a : DynamicArray<?>, fn : (?) -> Maybe<??>) -> DynamicArray<??> {
	mapDynamicArray(filterDynamicArray(mapDynamicArray(a, fn), isSome), \v ->
		switch (v) {
			Some(vv): vv;
			None(): flow(0);
		}
	);
}

filtersubmapDynamicArray(a : DynamicArray<?>, fn : (?) -> Transform<Maybe<??>>) -> DynamicArray<??> {
	mapDynamicArray(filterDynamicArray(submapDynamicArray(a, fn), isSome), \v -> {
		switch (v) {
			Some(vv): vv;
			None(): flow(0);
		}
	});
}

subfiltermapDynamicArray(a : DynamicArray<?>, fn : (?) -> Maybe<Transform<??>>) -> DynamicArray<??> {
	submapDynamicArray(filterDynamicArray(mapDynamicArray(a, fn), isSome), \v ->
		switch (v) {
			Some(vv): vv;
			None(): flow(0);
		}
	);
}

concatDynamicArray(a1 : DynamicArray<?>, a2 : DynamicArray<?>) -> DynamicArray<?> {
	DynamicArrayConcat(a1, a2, [], makeDList(), []);
}

subrangeDynamicArray(a : DynamicArray<?>, index : Transform<int>, len : Transform<int>) -> DynamicArray<?> {
	DynamicArraySubrange(a, index, len, [], makeDList(), []);
}

orderDynamicArray(a : DynamicArray<?>, order : DynamicArray<int>) -> DynamicArray<?> {
	DynamicArrayOrder(a, order, [], makeDList(), []);
}

mergeDynamicArray(a : DynamicArray<DynamicArray<?>>) -> DynamicArray<?> {
	DynamicArrayMerge(a, [], makeDList(), []);
}

constructDynamicArray(a : DynamicArray<?>, fn : [() -> () -> void]) -> DynamicArray<?> {
	DynamicArrayConstruct(a, fn, [], makeDList(), []);
}

findDynamicArray(a : DynamicArray<?>, fn : (?) -> bool) -> Transform<Maybe<?>> {
	res = make(None());
	resId = ref -1;

	fdisposable(
		res,
		subscribeDynamicArray(a, \op -> {
			switch (op : HeckelOperationSimple<?>) {
				HeckelInsert(i, v): {
					if (i <= ^resId) {
						resId := ^resId + 1;
					}

					if (isNone(getValue(res)) && fn(v)) {
						next(res, Some(v));
						resId := i;
					}
				}
				// HeckelMove(f, t): {
				// 	moveDynamicArray(a, f, t);
				// }
				HeckelDelete(i): {
					if (i < ^resId) {
						resId := ^resId - 1;
					}

					if (i == ^resId) {
						resId := -1;
						maybeApply(getValue(res), \r -> {
							next(res, None());
						});
					}
				}
			}
		})
	);
}

findmapDynamicArray(a : DynamicArray<?>, fn : (?) -> Maybe<??>) -> Transform<Maybe<??>> {
	res = make(None());
	resId = ref -1;

	fdisposable(
		res,
		subscribeDynamicArray(a, \op -> {
			switch (op : HeckelOperationSimple<?>) {
				HeckelInsert(i, v): {
					if (i <= ^resId) {
						resId := ^resId + 1;
					}

					if (isNone(getValue(res))) {
						r = fn(v);

						if (isSome(r)) {
							next(res, r);
							resId := i;
						}
					}
				}
				// HeckelMove(f, t): {
				// 	moveDynamicArray(a, f, t);
				// }
				HeckelDelete(i): {
					if (i < ^resId) {
						resId := ^resId - 1;
					}

					if (i == ^resId) {
						resId := -1;
						maybeApply(getValue(res), \r -> {
							next(res, None());
						});
					}
				}
			}
		})
	);
}

findsubmapDynamicArray(a : DynamicArray<?>, fn : (?) -> Transform<Maybe<??>>) -> Transform<Maybe<??>> {
	findmapDynamicArray(submapDynamicArray(a, fn), idfn);
}

// foldDynamicArray(a : DynamicArray<?>, def : ??, fn : (acc : ??, v : ?) -> ??) -> Transform<??> {
// 	result = make(def);
// 	uns := listenDynamicArray(a, \op -> {
// 		switch (op : HeckelOperationSimple<?>) {
// 			HeckelInsert(i, v): {
// 				index = make(i);
// 				r = a.fn(index, v);
// 				indexes := insertArray(^indexes, i, index);
// 				disposers := insertArray(^disposers, i, makeSubscribe2(r, \vv -> replaceDynamicArray(a, i, vv))());
// 				insertDynamicArray(a, i, fgetValue(r));
// 			}
// 			// HeckelMove(f, t): {
// 			// 	moveDynamicArray(a, f, t);
// 			// }
// 			HeckelDelete(i): {
// 				^disposers[i];
// 				indexes := removeIndex(^indexes, i);
// 				disposers := removeIndex(^disposers, i);
// 				deleteDynamicArray(a, i);
// 			}
// 		}
// 	});

// 	fdisposable(
// 		result,
// 		\ -> {
// 			^uns();
// 		}
// 	)
// }

lengthDynamicArray(a : DynamicArray<?>) -> Transform<int> {
	len = make(0);
	dispose = listenDynamicArray(a, \__ -> next(len, sizeDynamicArray(a)));
	next(len, sizeDynamicArray(a));

	fdisposable(len, dispose);
}

transformDynamicArray(a : DynamicArray<?>) -> Transform<[?]> {
	aa = make([]);
	dispose = listenDynamicArray(a, \__ -> next(aa, getDynamicArrayValue(a)));
	next(aa, getDynamicArrayValue(a));

	fdisposable(aa, dispose);
}

sizeDynamicArray(a : DynamicArray<?>) -> int {
	length(getDynamicArrayValue(a));
}

getDynamicArrayValue(a : DynamicArray<?>) -> [?] {
	linkDynamicArray(a);
	values = a.values;
	unlinkDynamicArray(a);
	values;
}

getDynamicArrayValueAt(a : DynamicArray<?>, index : int) -> ? {
	getDynamicArrayValue(a)[index];
}

applyFilterDynamicArray(a : DynamicArray<?>, fn : (?) -> bool) -> void {
	id = ref 0;
	iter(getDynamicArrayValue(a), \v -> {
		if (fn(v)) {
			id := ^id + 1;
		} else {
			deleteDynamicArray(a, ^id);
		}
	});
}