import ds/frp;
import ds/heckel_diff;
import ds/dynamic_array;

export {
	rmakea(elements : [?]) -> FrpArray<?>;
	rgeta(v : FrpArray<?>) -> [?];

	rsubscribea(f : FrpArray<?>, fn : (HeckelOperationSimple<?>) -> void) -> () -> void;
	raddDisposera(f : FrpArray<?>, disposer : () -> void) -> void;

	rinsertaf(v : FrpArray<?>, index : int, value : ?) -> void;
	rdeleteaf(v : FrpArray<?>, index : int) -> void;

	rnextaf(v : FrpArray<?>, values : [?]) -> void;

	// Update the value of a given element
	rupdateIndexf(v : FrpArray<?>, index : int, value : ?) -> void;
}

FrpArray(
	values : ref [ref ?], subscribers : DList<(HeckelOperationSimple<?>) -> void>, disposers : ref List<() -> void>
);

rmakea(elements : [?]) -> FrpArray<?> {
	FrpArray(ref map(elements, \a -> ref a), makeDList(), ref makeList());
}

rgeta(v : FrpArray<?>) -> [?] {
	map(^(v.values), \r -> ^r);
}

rlengtha(v : FrpArray<?>) -> int {
	length(^(v.values));
}

rsubscribea(f : FrpArray<?>, fn : (HeckelOperationSimple<?>) -> void) -> () -> void {
	n = pushDList(f.subscribers, fn);
	\ -> {
		removeDList(f.subscribers, n);
	}
}

raddDisposera(f : FrpArray<?>, disposer : () -> void) -> void {
	f.disposers := Cons(disposer, ^(f.disposers));
}

rinsertaf(v : FrpArray<?>, index : int, value : ?) -> void {
	ii = min(rlengtha(v), max(index, 0));

	v.values := insertArray(^(v.values), ii, ref value);

	iterDList(v.subscribers, \fn -> fn(HeckelInsert(ii, value)));
}

rdeleteaf(v : FrpArray<?>, index : int) -> void {
	if (existsIndex(^(v.values), index)) {
		v.values := removeIndex(^(v.values), index);

		iterDList(v.subscribers, \fn -> fn(HeckelDelete(index)));
	}
}

rnextaf(v : FrpArray<?>, values : [?]) -> void {
	iter(heckelDiff(map(^(v.values), \vv -> ^vv), values), \op -> {
		switch (op : HeckelOperation<?>) {
			HeckelInsert(i, value): {
				rinsertaf(v, i, value);
			}
			HeckelMove(f, t): {
				value = rgeta(v)[f];
				rdeleteaf(v, f);
				rinsertaf(v, t, value);
			}
			HeckelDelete(i): {
				rdeleteaf(v, i);
			}
		}
	});
}

rupdateIndexf(v : FrpArray<?>, index : int, value : ?) -> void {
	vals = ^(v.values);
	if (index < length(vals)) {
		rdeleteaf(v, index);
		rinsertaf(v, index, value);
	}
}

rmap(v : FrpArray<?>, fn : (?) -> ??) -> FrpArray<??> {
	r = rmakea(map(rgeta(v), fn));

	u = rsubscribea(v, \vv -> {
		switch (vv : HeckelOperationSimple<?>) {
			HeckelInsert(i, value): {
				rinsertaf(r, i, fn(value));
			}
			HeckelDelete(i): {
				rdeleteaf(r, i);
			}
		}
	});

	raddDisposera(r, u);

	r;
}