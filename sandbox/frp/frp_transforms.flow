import sandbox/frp/frp;

export {
	frpMerge2(f1 : Frp1<?>, f2 : Frp1<??>) -> Frp2<?, ??>;

	frpMapDistinct1(f : Frp1<?>, fn : (?) -> ??) -> Frp1<??>;
	frpMapDistinct2(f : Frp2<?, ??>, fn : (?, ??) -> ???) -> Frp1<???>;

	frpAdd(f : Frp2<double, double>) -> Frp1<double>;
	frpSub(f : Frp2<double, double>) -> Frp1<double>;
	frpMul(f : Frp2<double, double>) -> Frp1<double>;
	frpDiv(f : Frp2<double, double>) -> Frp1<double>;
	frpNeg(f : Frp1<double>) -> Frp1<double>;

	frpAddi(f : Frp2<int, int>) -> Frp1<int>;
	frpSubi(f : Frp2<int, int>) -> Frp1<int>;
	frpMuli(f : Frp2<int, int>) -> Frp1<int>;
	frpDivi(f : Frp2<int, int>) -> Frp1<int>;
	frpNegi(f : Frp1<int>) -> Frp1<int>;


	// fgreater(b1 : Transform<double>, b2 : Transform<double>) -> Transform<bool>;
	// fless(b1 : Transform<double>, b2 : Transform<double>) -> Transform<bool>;

	// fgreateri(b1 : Transform<int>, b2 : Transform<int>) -> Transform<bool>;
	// flessi(b1 : Transform<int>, b2 : Transform<int>) -> Transform<bool>;

/*
	fmax(b1 : Transform<?>, b2 : Transform<?>) -> Transform<?>; // For bools, this is OR
	fmin(b1 : Transform<?>, b2 : Transform<?>) -> Transform<?>; // For bools, this is AND
	fmax3(b1 : Transform<?>, b2 : Transform<?>, b3 : Transform<?>) -> Transform<?>; // For bools, this is OR
	fmin3(b1 : Transform<?>, b2 : Transform<?>, b3 : Transform<?>) -> Transform<?>; // For bools, this is AND
	fmaxA(v : [Transform<?>], def : ?) -> Transform<?>;
	fminA(v : [Transform<?>], def : ?) -> Transform<?>;

	feq(b : Transform<?>, v : ?) -> Transform<bool>;
	fneq(a : Transform<?>, v : ?) -> Transform<bool>;
	fequal(a : Transform<?>, b : Transform<?>) -> Transform<bool>;
	fnotequal(a : Transform<?>, b : Transform<?>) -> Transform<bool>;
	fnot(b : Transform<bool>) -> Transform<bool>;
	fand(a : Transform<bool>, b : Transform<bool>) -> Transform<bool>;
	fOr(a : Transform<bool>, b : Transform<bool>) -> Transform<bool>;
	fxor(a : Transform<bool>, b : Transform<bool>) -> Transform<bool>;
	fabs(a : Transform<double>) -> Transform<double>;
*/


	// Switch between two frps depending on a condition
	frpIfDistinct1(condition : Frp1<bool>, then : Frp1<?>, else_ : Frp1<?>) -> Frp1<?>;
}

frpMerge2(f1 : Frp1<?>, f2 : Frp1<??>) -> Frp2<?, ??> {
	s = fmake2(fget1(f1), fget1(f2));
	u1 = fsubscribe1s(f1, \v -> {
		fnext2First(s, v)
	});
	faddDisposer2(s, u1);
	u2 = fsubscribe1s(f2, \v -> {
		fnext2Second(s, v)
	});
	faddDisposer2(s, u2);
	s;
}

frpMapDistinct1(f : Frp1<?>, fn : (?) -> ??) -> Frp1<??> {
	s = fmake1(fn(fget1(f)));
	us = fsubscribe1s(f, \v -> {
		fnextDistinct1(s, fn(v));
	});
	faddDisposer1(s, us);
	s;
}


frpMapDistinct2(f : Frp2<?, ??>, fn : (?, ??) -> ???) -> Frp1<???> {
	s = fmake1(fn(fget2First(f), fget2Second(f)));
	us = fsubscribe2s(f, \v, w -> {
		fnextDistinct1(s, fn(v, w));
	});
	faddDisposer1(s, us);
	s;
}

frpAdd(f : Frp2<double, double>) -> Frp1<double> {
	frpMapDistinct2(f, \v, w -> v + w);
}

frpSub(f : Frp2<double, double>) -> Frp1<double> {
	frpMapDistinct2(f, \v, w -> v - w);
}

frpMul(f : Frp2<double, double>) -> Frp1<double> {
	frpMapDistinct2(f, \v, w -> v * w);
}

frpDiv(f : Frp2<double, double>) -> Frp1<double> {
	frpMapDistinct2(f, \v, w -> if (w == 0.0) 0.0 else v / w);
}

frpNeg(f : Frp1<double>) -> Frp1<double> {
	frpMapDistinct1(f, \v -> -v);
}


frpAddi(f : Frp2<int, int>) -> Frp1<int> {
	frpMapDistinct2(f, \v, w -> v + w);
}

frpSubi(f : Frp2<int, int>) -> Frp1<int> {
	frpMapDistinct2(f, \v, w -> v - w);
}

frpMuli(f : Frp2<int, int>) -> Frp1<int> {
	frpMapDistinct2(f, \v, w -> v * w);
}

frpDivi(f : Frp2<int, int>) -> Frp1<int> {
	frpMapDistinct2(f, \v, w -> if (w == 0) 0 else v / w);
}

frpNegi(f : Frp1<int>) -> Frp1<int> {
	frpMapDistinct1(f, \v -> -v);
}


frpIfDistinct1(condition : Frp1<bool>, then : Frp1<?>, else_ : Frp1<?>) -> Frp1<?> {
	s = fmake1(if (fget1(condition)) fget1(then) else fget1(else_));
	u1 = fsubscribe1s(then, \v -> {
		if (fget1(condition)) {
			fnextDistinct1(s, v);
		}
	});
	faddDisposer1(s, u1);
	u2 = fsubscribe1s(else_, \v -> {
		if (!fget1(condition)) {
			fnextDistinct1(s, v);
		} 
	});
	faddDisposer1(s, u2);

	us = fsubscribe1s(condition, \c -> {
		fnextDistinct1(s, if (c) fget1(then) else fget1(else_));
	});
	faddDisposer1(s, us);
	s;
}
