import sandbox/frp/frp;

export {
	// A bit similar to fselect
	frpSelect(f : Frp1<?>, fn : (?) -> ??) -> Frp1<??>;
	frpSelect1(v : Frp1<?>, w : Frp1<?>, fn : (?, ??) -> ???) -> Frp1<???>;
	frpSelect2(f : Frp2<?, ??>, fn : (?, ??) -> ???) -> Frp1<???>;

	// Merge two streams into one
	frpMergef2(f1 : Frp1<?>, f2 : Frp1<??>) -> Frp2<?, ??>;
	frpMerge2(f1 : Frp1<?>, f2 : Frp1<??>) -> Frp2<?, ??>;

	// Pick a substream
	frpFirstf(f : Frp2<?, ??>) -> Frp1<?>;
	frpFirst(f : Frp2<?, ??>) -> Frp1<?>;
	frpSecondf(f : Frp2<?, ??>) -> Frp1<??>;
	frpSecond(f : Frp2<?, ??>) -> Frp1<??>;

	// Switch between two frps depending on a condition
	frpIff1(condition : Frp1<bool>, then : Frp1<?>, else_ : Frp1<?>) -> Frp1<?>;
	frpIf1(condition : Frp1<bool>, then : Frp1<?>, else_ : Frp1<?>) -> Frp1<?>;

	// frpIf2(condition : Frp1<bool>, thenElse : Frp2<?, ??>) -> Frp1<?>;

	frpAdd(f : Frp2<double, double>) -> Frp1<double>;
	frpSub(f : Frp2<double, double>) -> Frp1<double>;
	frpMul(f : Frp2<double, double>) -> Frp1<double>;
	frpDiv(f : Frp2<double, double>) -> Frp1<double>;
	frpNeg(f : Frp1<double>) -> Frp1<double>;

	frpAddi(f : Frp2<int, int>) -> Frp1<int>;
	frpSubi(f : Frp2<int, int>) -> Frp1<int>;
	frpMuli(f : Frp2<int, int>) -> Frp1<int>;
	frpDivi(f : Frp2<int, int>) -> Frp1<int>;
	frpNegi(f : Frp1<int>) -> Frp1<int>;

	frpGreater(f : Frp2<double, double>) -> Frp1<bool>;
	frpLess(f : Frp2<double, double>) -> Frp1<bool>;

	frpGreateri(f : Frp2<int, int>) -> Frp1<bool>;
	frpLessi(f : Frp2<int, int>) -> Frp1<bool>;

	frpMax(f : Frp2<?, ?>) -> Frp1<?>;
	frpMin(f : Frp2<?, ?>) -> Frp1<?>;

	frpEq(b : Frp1<?>, v : ?) -> Frp1<bool>;
	frpNeq(a : Frp1<?>, v : ?) -> Frp1<bool>;
	frpEqual(f : Frp2<?, ?>) -> Frp1<bool>;
	frpNotEqual(f : Frp2<?, ?>) -> Frp1<bool>;
	frpNot(b : Frp1<bool>) -> Frp1<bool>;
	frpAnd(f : Frp2<bool, bool>) -> Frp1<bool>;
	frpOr(f : Frp2<bool, bool>) -> Frp1<bool>;
	frpXor(f : Frp2<bool, bool>) -> Frp1<bool>;
	frpAbs(a : Frp1<double>) -> Frp1<double>;
}


frpSelect(f : Frp1<?>, fn : (?) -> ??) -> Frp1<??> {
	s = fmake1(fn(fget1(f)));
	fsubscribes1To1(f, \v -> {
		fnext1(s, fn(v));
	}, s);
	s;
}

frpSelect1(v : Frp1<?>, w : Frp1<?>, fn : (?, ??) -> ???) -> Frp1<???> {
	s = fmake1(fn(fget1(v), fget1(w)));
	fsubscribes1To1(v, \vv -> {
		fnext1(s, fn(vv, fget1(w)));
	}, s);
	fsubscribes1To1(w, \vv -> {
		fnext1(s, fn(fget1(v), vv));
	}, s);
	s;
}

frpSelect2(f : Frp2<?, ??>, fn : (?, ??) -> ???) -> Frp1<???> {
	s = fmake1(fn(fgetFirst2(f), fgetSecond2(f)));
	fsubscribes2To1(f, \v, w -> {
		fnext1(s, fn(v, w));
	}, s);
	s;
}

frpMergef2(f1 : Frp1<?>, f2 : Frp1<??>) -> Frp2<?, ??> {
	s = fmake2(fget1(f1), fget1(f2));
	fsubscribes1To2(f1, \v -> fnextFirstf2(s, v), s);
	fsubscribes1To2(f2, \v -> fnextSecondf2(s, v), s);
	s;
}

frpMerge2(f1 : Frp1<?>, f2 : Frp1<??>) -> Frp2<?, ??> {
	s = fmake2(fget1(f1), fget1(f2));
	fsubscribes1To2(f1, \v -> fnextFirst2(s, v), s);
	fsubscribes1To2(f2, \v -> fnextSecond2(s, v), s);
	s;
}


frpFirstf(f : Frp2<?, ??>) -> Frp1<?> {
	s = fmake1(fgetFirst2(f));
	fsubscribes2To1(f, \v, w -> {
		fnextf1(s, v);
	}, s);
	s;
}

frpFirst(f : Frp2<?, ??>) -> Frp1<?> {
	s = fmake1(fgetFirst2(f));
	fsubscribes2To1(f, \v, w -> {
		fnext1(s, v);
	}, s);
	s;
}

frpSecondf(f : Frp2<?, ??>) -> Frp1<??> {
	s = fmake1(fgetFirst2(f));
	fsubscribes2To1(f, \v, w -> {
		fnextf1(s, w);
	}, s);
	s;
}

frpSecond(f : Frp2<?, ??>) -> Frp1<??> {
	s = fmake1(fgetFirst2(f));
	fsubscribes2To1(f, \v, w -> {
		fnext1(s, w);
	}, s);
	s;
}



frpIff1(condition : Frp1<bool>, then : Frp1<?>, else_ : Frp1<?>) -> Frp1<?> {
	s = fmake1(if (fget1(condition)) fget1(then) else fget1(else_));
	fsubscribes1To1(then, \v -> {
		if (fget1(condition)) {
			fnextf1(s, v);
		}
	}, s);
	fsubscribes1To1(else_, \v -> {
		if (!fget1(condition)) {
			fnextf1(s, v);
		} 
	}, s);
	fsubscribes1To1(condition, \c -> {
		fnextf1(s, if (c) fget1(then) else fget1(else_));
	}, s);
	s;
}


frpIf1(condition : Frp1<bool>, then : Frp1<?>, else_ : Frp1<?>) -> Frp1<?> {
	s = fmake1(if (fget1(condition)) fget1(then) else fget1(else_));
	fsubscribes1To1(then, \v -> {
		if (fget1(condition)) {
			fnext1(s, v);
		}
	}, s);
	fsubscribes1To1(else_, \v -> {
		if (!fget1(condition)) {
			fnext1(s, v);
		} 
	}, s);
	fsubscribes1To1(condition, \c -> {
		fnext1(s, if (c) fget1(then) else fget1(else_));
	}, s);
	s;
}


/*
frpIf2(condition : Frp1<bool>, thenElse : Frp2<?, ??>) -> Frp1<?> {
	s = fmake1(if (fget1(condition)) fget1(then) else fget1(else_));
}

*/




frpAdd(f : Frp2<double, double>) -> Frp1<double> {
	frpSelect2(f, \v, w -> v + w);
}

frpSub(f : Frp2<double, double>) -> Frp1<double> {
	frpSelect2(f, \v, w -> v - w);
}

frpMul(f : Frp2<double, double>) -> Frp1<double> {
	frpSelect2(f, \v, w -> v * w);
}

frpDiv(f : Frp2<double, double>) -> Frp1<double> {
	frpSelect2(f, \v, w -> if (w == 0.0) 0.0 else v / w);
}

frpNeg(f : Frp1<double>) -> Frp1<double> {
	frpSelect(f, \v -> -v);
}


frpAddi(f : Frp2<int, int>) -> Frp1<int> {
	frpSelect2(f, \v, w -> v + w);
}

frpSubi(f : Frp2<int, int>) -> Frp1<int> {
	frpSelect2(f, \v, w -> v - w);
}

frpMuli(f : Frp2<int, int>) -> Frp1<int> {
	frpSelect2(f, \v, w -> v * w);
}

frpDivi(f : Frp2<int, int>) -> Frp1<int> {
	frpSelect2(f, \v, w -> if (w == 0) 0 else v / w);
}

frpNegi(f : Frp1<int>) -> Frp1<int> {
	frpSelect(f, \v -> -v);
}

frpGreater(f : Frp2<double, double>) -> Frp1<bool> {
	frpSelect2(f, \v, w -> v > w);
}

frpLess(f : Frp2<double, double>) -> Frp1<bool> {
	frpSelect2(f, \v, w -> v < w);
}

frpGreateri(f : Frp2<int, int>) -> Frp1<bool> {
	frpSelect2(f, \v, w -> v > w);
}

frpLessi(f : Frp2<int, int>) -> Frp1<bool> {
	frpSelect2(f, \v, w -> v < w);
}

frpMax(f : Frp2<?, ?>) -> Frp1<?> {
	frpSelect2(f, \v, w -> if (v > w) v else w);
}

frpMin(f : Frp2<?, ?>) -> Frp1<?> {
	frpSelect2(f, \v, w -> if (v < w) v else w);
}

frpEq(f : Frp1<?>, v : ?) -> Frp1<bool> {
	frpSelect(f, \vv -> vv == v);
}

frpNeq(f : Frp1<?>, v : ?) -> Frp1<bool> {
	frpSelect(f, \vv -> vv != v);
}

frpEqual(f : Frp2<?, ?>) -> Frp1<bool> {
	frpSelect2(f, \v, w -> v == w);
}

frpNotEqual(f : Frp2<?, ?>) -> Frp1<bool>{
	frpSelect2(f, \v, w -> v != w);
}
frpNot(f : Frp1<bool>) -> Frp1<bool> {
	frpSelect(f, \v -> !v);
}

frpAnd(f : Frp2<bool, bool>) -> Frp1<bool> {
	frpSelect2(f, \v, w -> v && w);
}
frpOr(f : Frp2<bool, bool>) -> Frp1<bool>{
	frpSelect2(f, \v, w -> v || w);
}
frpXor(f : Frp2<bool, bool>) -> Frp1<bool>{
	frpSelect2(f, \v, w -> v != w);
}
frpAbs(f : Frp1<double>) -> Frp1<double>{
	frpSelect(f, \v -> if (v < 0.0) -v else v );
}

fsubscribes1To1(v : Frp1<?>, fn : (?) -> void, target : FrpValue1<??>) -> void {
	u = fsubscribes1(v, fn);
	faddDisposer1(target, u);
}

fsubscribes1To2(v : Frp1<?>, fn : (?) -> void, target : FrpValue2<??, ???>) -> void {
	u = fsubscribes1(v, fn);
	faddDisposer2(target, u);
}

fsubscribes2To1(v : Frp2<?, ??>, fn : (?, ??) -> void, target : FrpValue1<???>) -> void {
	u = fsubscribes2(v, fn);
	faddDisposer1(target, u);
}
