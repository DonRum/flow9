import sandbox/frp/frp;

export {
	frpMerge2(f1 : Frp1<?>, f2 : Frp1<??>) -> Frp2<?, ??>;
	frpAdd(f : Frp2<double, double>) -> Frp1<double>;
	frpIf1(condition : Frp1<bool>, then : Frp1<?>, else_ : Frp1<?>) -> Frp1<?>;
}

frpMerge2(f1 : Frp1<?>, f2 : Frp1<??>) -> Frp2<?, ??> {
	s = fmake2(fget1(f1), fget1(f2));
	u1 = fsubscribe1s(f1, \v -> {
		fnext2First(s, v)
	});
	faddDisposer2(s, u1);
	u2 = fsubscribe1s(f2, \v -> {
		fnext2Second(s, v)
	});
	faddDisposer2(s, u2);
	s;
}

frpAdd(f : Frp2<double, double>) -> Frp1<double> {
	s = fmake1(fget2First(f) + fget2Second(f));
	us = fsubscribe2s(f, \v, w -> {
		fnextDistinct1(s, v + w);
	});
	faddDisposer1(s, us);
	s;
}

frpIf1(condition : Frp1<bool>, then : Frp1<?>, else_ : Frp1<?>) -> Frp1<?> {
	s = fmake1(if (fget1(condition)) fget1(then) else fget1(else_));
	u1 = fsubscribe1s(then, \v -> {
		if (fget1(condition)) {
			fnextDistinct1(s, v);
		}
	});
	faddDisposer1(s, u1);
	u2 = fsubscribe1s(else_, \v -> {
		if (!fget1(condition)) {
			fnextDistinct1(s, v);
		} 
	});
	faddDisposer1(s, u2);

	us = fsubscribe1s(condition, \c -> {
		fnextDistinct1(s, if (c) fget1(then) else fget1(else_));
	});
	faddDisposer1(s, us);
	s;
}
