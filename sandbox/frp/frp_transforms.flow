import sandbox/frp/frp;

export {
	// A bit similar to fselect
	rselect(f : Frp1<?>, fn : (?) -> ??) -> Frp1<??>;
	rselect1(v : Frp1<?>, w : Frp1<?>, fn : (?, ??) -> ???) -> Frp1<???>;
	rselect2(f : Frp2<?, ??>, fn : (?, ??) -> ???) -> Frp1<???>;

	// Merge two streams into one
	rmergef2(f1 : Frp1<?>, f2 : Frp1<??>) -> Frp2<?, ??>;
	rmerge2(f1 : Frp1<?>, f2 : Frp1<??>) -> Frp2<?, ??>;

	// Pick a substream
	rfirstf(f : Frp2<?, ??>) -> Frp1<?>;
	rfirst(f : Frp2<?, ??>) -> Frp1<?>;
	rsecondf(f : Frp2<?, ??>) -> Frp1<??>;
	rsecond(f : Frp2<?, ??>) -> Frp1<??>;

	// Switch between two frps depending on a condition
	riff1(condition : Frp1<bool>, then : Frp1<?>, else_ : Frp1<?>) -> Frp1<?>;
	rif1(condition : Frp1<bool>, then : Frp1<?>, else_ : Frp1<?>) -> Frp1<?>;

	// rif2(condition : Frp1<bool>, thenElse : Frp2<?, ??>) -> Frp1<?>;

	radd(f : Frp2<double, double>) -> Frp1<double>;
	rsub(f : Frp2<double, double>) -> Frp1<double>;
	rmul(f : Frp2<double, double>) -> Frp1<double>;
	rdiv(f : Frp2<double, double>) -> Frp1<double>;
	rneg(f : Frp1<double>) -> Frp1<double>;

	raddi(f : Frp2<int, int>) -> Frp1<int>;
	rsubi(f : Frp2<int, int>) -> Frp1<int>;
	rmuli(f : Frp2<int, int>) -> Frp1<int>;
	rdivi(f : Frp2<int, int>) -> Frp1<int>;
	rnegi(f : Frp1<int>) -> Frp1<int>;

	rgreater(f : Frp2<double, double>) -> Frp1<bool>;
	rless(f : Frp2<double, double>) -> Frp1<bool>;

	rgreateri(f : Frp2<int, int>) -> Frp1<bool>;
	rlessi(f : Frp2<int, int>) -> Frp1<bool>;

	rmax(f : Frp2<?, ?>) -> Frp1<?>;
	rmin(f : Frp2<?, ?>) -> Frp1<?>;

	req(b : Frp1<?>, v : ?) -> Frp1<bool>;
	rneq(a : Frp1<?>, v : ?) -> Frp1<bool>;
	requal(f : Frp2<?, ?>) -> Frp1<bool>;
	rnotEqual(f : Frp2<?, ?>) -> Frp1<bool>;
	rnot(b : Frp1<bool>) -> Frp1<bool>;
	rand(f : Frp2<bool, bool>) -> Frp1<bool>;
	ror(f : Frp2<bool, bool>) -> Frp1<bool>;
	rxor(f : Frp2<bool, bool>) -> Frp1<bool>;
	rabs(a : Frp1<double>) -> Frp1<double>;
}


rselect(f : Frp1<?>, fn : (?) -> ??) -> Frp1<??> {
	s = rmake1(fn(rget1(f)));
	rsubscribes1To1(f, \v -> {
		rnext1(s, fn(v));
	}, s);
	s;
}

rselect1(v : Frp1<?>, w : Frp1<?>, fn : (?, ??) -> ???) -> Frp1<???> {
	s = rmake1(fn(rget1(v), rget1(w)));
	rsubscribes1To1(v, \vv -> {
		rnext1(s, fn(vv, rget1(w)));
	}, s);
	rsubscribes1To1(w, \vv -> {
		rnext1(s, fn(rget1(v), vv));
	}, s);
	s;
}

rselect2(f : Frp2<?, ??>, fn : (?, ??) -> ???) -> Frp1<???> {
	s = rmake1(fn(rgetFirst2(f), rgetSecond2(f)));
	rsubscribes2To1(f, \v, w -> {
		rnext1(s, fn(v, w));
	}, s);
	s;
}

rmergef2(f1 : Frp1<?>, f2 : Frp1<??>) -> Frp2<?, ??> {
	s = rmake2(rget1(f1), rget1(f2));
	rsubscribes1To2(f1, \v -> rnextFirstf2(s, v), s);
	rsubscribes1To2(f2, \v -> rnextSecondf2(s, v), s);
	s;
}

rmerge2(f1 : Frp1<?>, f2 : Frp1<??>) -> Frp2<?, ??> {
	s = rmake2(rget1(f1), rget1(f2));
	rsubscribes1To2(f1, \v -> rnextFirst2(s, v), s);
	rsubscribes1To2(f2, \v -> rnextSecond2(s, v), s);
	s;
}


rfirstf(f : Frp2<?, ??>) -> Frp1<?> {
	s = rmake1(rgetFirst2(f));
	rsubscribes2To1(f, \v, w -> {
		rnextf1(s, v);
	}, s);
	s;
}

rfirst(f : Frp2<?, ??>) -> Frp1<?> {
	s = rmake1(rgetFirst2(f));
	rsubscribes2To1(f, \v, w -> {
		rnext1(s, v);
	}, s);
	s;
}

rsecondf(f : Frp2<?, ??>) -> Frp1<??> {
	s = rmake1(rgetFirst2(f));
	rsubscribes2To1(f, \v, w -> {
		rnextf1(s, w);
	}, s);
	s;
}

rsecond(f : Frp2<?, ??>) -> Frp1<??> {
	s = rmake1(rgetFirst2(f));
	rsubscribes2To1(f, \v, w -> {
		rnext1(s, w);
	}, s);
	s;
}



riff1(condition : Frp1<bool>, then : Frp1<?>, else_ : Frp1<?>) -> Frp1<?> {
	s = rmake1(if (rget1(condition)) rget1(then) else rget1(else_));
	rsubscribes1To1(then, \v -> {
		if (rget1(condition)) {
			rnextf1(s, v);
		}
	}, s);
	rsubscribes1To1(else_, \v -> {
		if (!rget1(condition)) {
			rnextf1(s, v);
		} 
	}, s);
	rsubscribes1To1(condition, \c -> {
		rnextf1(s, if (c) rget1(then) else rget1(else_));
	}, s);
	s;
}


rif1(condition : Frp1<bool>, then : Frp1<?>, else_ : Frp1<?>) -> Frp1<?> {
	s = rmake1(if (rget1(condition)) rget1(then) else rget1(else_));
	rsubscribes1To1(then, \v -> {
		if (rget1(condition)) {
			rnext1(s, v);
		}
	}, s);
	rsubscribes1To1(else_, \v -> {
		if (!rget1(condition)) {
			rnext1(s, v);
		} 
	}, s);
	rsubscribes1To1(condition, \c -> {
		rnext1(s, if (c) rget1(then) else rget1(else_));
	}, s);
	s;
}


/*
rif2(condition : Frp1<bool>, thenElse : Frp2<?, ??>) -> Frp1<?> {
	s = rmake1(if (rget1(condition)) rget1(then) else rget1(else_));
}

*/




radd(f : Frp2<double, double>) -> Frp1<double> {
	rselect2(f, \v, w -> v + w);
}

rsub(f : Frp2<double, double>) -> Frp1<double> {
	rselect2(f, \v, w -> v - w);
}

rmul(f : Frp2<double, double>) -> Frp1<double> {
	rselect2(f, \v, w -> v * w);
}

rdiv(f : Frp2<double, double>) -> Frp1<double> {
	rselect2(f, \v, w -> if (w == 0.0) 0.0 else v / w);
}

rneg(f : Frp1<double>) -> Frp1<double> {
	rselect(f, \v -> -v);
}


raddi(f : Frp2<int, int>) -> Frp1<int> {
	rselect2(f, \v, w -> v + w);
}

rsubi(f : Frp2<int, int>) -> Frp1<int> {
	rselect2(f, \v, w -> v - w);
}

rmuli(f : Frp2<int, int>) -> Frp1<int> {
	rselect2(f, \v, w -> v * w);
}

rdivi(f : Frp2<int, int>) -> Frp1<int> {
	rselect2(f, \v, w -> if (w == 0) 0 else v / w);
}

rnegi(f : Frp1<int>) -> Frp1<int> {
	rselect(f, \v -> -v);
}

rgreater(f : Frp2<double, double>) -> Frp1<bool> {
	rselect2(f, \v, w -> v > w);
}

rless(f : Frp2<double, double>) -> Frp1<bool> {
	rselect2(f, \v, w -> v < w);
}

rgreateri(f : Frp2<int, int>) -> Frp1<bool> {
	rselect2(f, \v, w -> v > w);
}

rlessi(f : Frp2<int, int>) -> Frp1<bool> {
	rselect2(f, \v, w -> v < w);
}

rmax(f : Frp2<?, ?>) -> Frp1<?> {
	rselect2(f, \v, w -> if (v > w) v else w);
}

rmin(f : Frp2<?, ?>) -> Frp1<?> {
	rselect2(f, \v, w -> if (v < w) v else w);
}

req(f : Frp1<?>, v : ?) -> Frp1<bool> {
	rselect(f, \vv -> vv == v);
}

rneq(f : Frp1<?>, v : ?) -> Frp1<bool> {
	rselect(f, \vv -> vv != v);
}

requal(f : Frp2<?, ?>) -> Frp1<bool> {
	rselect2(f, \v, w -> v == w);
}

rnotEqual(f : Frp2<?, ?>) -> Frp1<bool>{
	rselect2(f, \v, w -> v != w);
}
rnot(f : Frp1<bool>) -> Frp1<bool> {
	rselect(f, \v -> !v);
}

rand(f : Frp2<bool, bool>) -> Frp1<bool> {
	rselect2(f, \v, w -> v && w);
}
ror(f : Frp2<bool, bool>) -> Frp1<bool>{
	rselect2(f, \v, w -> v || w);
}
rxor(f : Frp2<bool, bool>) -> Frp1<bool>{
	rselect2(f, \v, w -> v != w);
}
rabs(f : Frp1<double>) -> Frp1<double>{
	rselect(f, \v -> if (v < 0.0) -v else v );
}

rsubscribes1To1(v : Frp1<?>, fn : (?) -> void, target : FrpValue1<??>) -> void {
	u = rsubscribes1(v, fn);
	raddDisposer1(target, u);
}

rsubscribes1To2(v : Frp1<?>, fn : (?) -> void, target : FrpValue2<??, ???>) -> void {
	u = rsubscribes1(v, fn);
	raddDisposer2(target, u);
}

rsubscribes2To1(v : Frp2<?, ??>, fn : (?, ??) -> void, target : FrpValue1<???>) -> void {
	u = rsubscribes2(v, fn);
	raddDisposer1(target, u);
}
