import material/material_ui;

main() {
    setRendererType("html");
    manager = makeMaterialManager([]);
    r = repeatable(10);

    n = 10000;

    complexMaterial = \j ->
        MCols(
            generate(0, 2, \i -> {
                MTooltip(
                    MCopySize(TRectangle([Fill(i * j * 10)], TFillXY()), \sz -> MCenterIn(MText(i2s(n - j), []), sz), true),
                    MText(i2s(j) + " " + i2s(i), []),
                    []
                )
            })
        );
    m = MElementCanvas(const(generate(0, n, \i -> {
        MElement(
            const(random() * 10000.0),
            const(random() * 10000.0),
            const(i - n),
            const(300.0),
            const(20.0),
            \ -> complexMaterial(i)
        )
    })))
    |> (\f -> if (isUrlParameterTrue("canvas")) MCanvas(f) else f);

    mrender(manager, true, m);
}

MElement(x : Transform<double>, y : Transform<double>, z : Transform<int>, width : Transform<double>, height : Transform<double>, m : () -> Material);

makeMElementMaterail(element : MElement) -> Material {
    renderable = make(false);

    MZIndex(
        element.z,
        MRenderable(
            renderable,
            MBorderT(
                element.x,
                element.y,
                zero,
                zero,
                MFixSize(
                    MShowLazy(
                        renderable,
                        \ -> MAvailable(element.m(), TSized(fwh(element.width, element.height)))
                    ),
                    TSized(fwh(element.width, element.height))
                )
            )
        )
    );
}

MElementCanvas(elements : Transform<[MElement]>) -> Material {
    (
        if (!isFConst(elements))
            SelectMGroup(elements, \index, id, element -> makeMElementMaterail(element))
        else
            MGroup(map(fgetValue(elements), makeMElementMaterail))
    )
    |> (\f -> MScroll(f, TFillXY(), []));
}