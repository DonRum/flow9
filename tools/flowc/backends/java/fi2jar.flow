import sys/system;
import tools/flowc/backends/common;

export {
	buildFiJarFile(cfg : FiJavaConfig, path : string, callback : () -> void) -> void;
}

// native startProcess : io (command : string, args : [string], currentWorkingDirectory : string, stdin : string, onExit : (errorcode : int, stdout : string, stderr : string) -> void) -> void = Native.startProcess;

buildFiJarFile(cfg : FiJavaConfig, path : string, callback : () -> void) -> void {
	jar = changeFileExt(cfg.jarfile, ".jar");
	println("\"%JAVA_HOME%\\bin\\javac\" -Xlint:unchecked -encoding UTF-8 -cp platforms/java " + path + "/*.java");
	println("\"%JAVA_HOME%\\bin\\jar\" cf " + jar + " -C platforms/java com/area9innovation/flow/");
	println("\"%JAVA_HOME%\\bin\\jar\" feu " + jar + " com.area9innovation.flow.Main -C " + cfg.outputdir + " com/area9innovation/flow");
	println("Run with \"java -jar " + jar + "\"");

	flowdir = getFlowDir();
	package_path = pathCombineMany(concat([cfg.outputdir], strSplit(cfg.packageName, ".")));

	build_jar = \-> {
		fcPrintln("Building a jar file");
		fcPrintln("command:");
		fcPrintln("jar" + strGlue(["cfe " + jar, "com.area9innovation.flow.Main", "-C " + flowdir + "/platforms/java", "com/area9innovation/flow/"], " "));
		startProcess(
			"jar", 
			["cfe " + jar, "com.area9innovation.flow.Main", "-C " + flowdir + "/platforms/java", "com/area9innovation/flow/"], 
			".", 
			"", 
			\errcode, stdout, stderr -> {
				if (stdout != "") fcPrintln(stdout);
				if (stderr != "") fcPrintln(stderr);
				if (errcode == 0) {
					fcPrintln("Run with \"java -jar " + jar + "\"");
				}
				callback()
			} 
		)
	}

	compile_java = \ -> {
		fcPrintln("Compiling the generated code");
		fcPrintln("command:");
		fcPrintln("javac" + strGlue(["-Xlint:unchecked", "-encoding UTF-8", "-cp " + flowdir + "/platforms/java",  path + "/*.java"], " "));
		startProcess(
			"javac", 
			["-Xlint:unchecked", "-encoding UTF-8", "-cp " + flowdir + "/platforms/java",  path + "/*.java"], 
			".", 
			"", 
			\errcode, stdout, stderr -> {
				if (stdout != "") fcPrintln(stdout);
				if (stderr != "") fcPrintln(stderr);
				if (errcode == 0) {
					build_jar()
				} else {
					callback()
				}
			}
		)
	}

	compile_java();
}
