import tools/flowc/incremental/fi2flowsrc;
import tools/flowc/tests/incremental/stochastic_gen;

export {
	writeModule(module : FiModule) -> void;
	mutateModulesCorrectly(generated : GenModules) -> void;
}

mutateModulesCorrectly(generated : GenModules) -> void {
	ind = randomInt(length(generated.modules));
	module = ^(generated.modules[ind]);
	if (length(module.structs) > 0) {
		// A struct module
		struct = module.structs[0];
		choice = randomInt(4);
		if (choice == 0) {
			// add a field
			addAStructField(ind, struct, generated);
		} else if (choice == 1) {
			// delete a field 
		} else if (choice == 2) {
			// rename a field
		} else if (choice == 3) {
			// change field type
		}
	} else if (length(module.unions) > 0) {
		// A union module
		choice = randomInt(2);
		if (choice == 0) {
			// Add a random struct to the union
			
		} else if (choice == 1) {
			// Remove a random struct from the union
			
			
		}
	} else if (length(module.functions) > 0) {
	
	} else if (length(module.globalVars) > 0) {
	
	}
	writeModule(^(generated.modules[ind]));
}

//FiTypeStruct(name : string, typars : [FiType], args : [FiStructArg], start : int);
//		FiStructArg(name : string, type : FiType, ismutable : bool);
//	FiTypeUnion(name : string, typeparameters : [FiType], typenames : [FiTypeName], start : int);

addAStructField(i : int, struct : FiTypeStruct, generated : GenModules) -> void {
	new_field = FiStructArg("f_" + i2s(length(struct.args)), generateType(^(generated.env)), false);
	new_struct = FiTypeStruct(
		struct.name, [], 
		concat(struct.args, [new_field]), -1
	);
	orig_module = ^(generated.modules[i]);
	generated.modules[i] := FiModule(orig_module with structs = [new_struct]);
	modified_inds = foldi(generated.modules, [i],
		\j, acc, modref -> {
			m = ^modref;
			concat(acc, [j])
		}
	)
	iter(modified_inds, \j -> writeModule(^(generated.modules[j])))
}

writeModule(module : FiModule) -> void {
	src = fimodule2flowsrc(module);
	ensureDirectoryExists(dirName(module.fileinfo.fullpath));
	setFileContent(module.fileinfo.fullpath, src);
	{}
}
