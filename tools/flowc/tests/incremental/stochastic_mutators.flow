import tools/flowc/incremental/fi2flowsrc;
import tools/flowc/tests/incremental/stochastic_gen;
import tools/flowc/tests/incremental/stochastic_add_field;
import tools/flowc/tests/incremental/stochastic_remove_field;

export {
	writeModule(module : FiModule) -> void;
	mutateModulesCorrectly(generated : GenModules) -> void;
}

mutateModulesCorrectly(generated : GenModules) -> void {
	ind = randomInt(length(generated.modules));
	module = ^(generated.modules[ind]);
	changed = if (length(module.structs) > 0) {
		// A struct module
		struct = module.structs[0];
		choice = randomInt(2);
		if (choice == 0) {
			// add a field
			addAStructField(ind, struct, generated);
		} else if (choice == 1) {
			// delete a field 
			removeAStructField(ind, struct, generated);
		} else if (choice == 2) {
			// rename a field
			[]
		} else if (choice == 3) {
			// change field type
			[]
		} else {
			[]
		}
	} else if (length(module.unions) > 0) {
		// A union module
		choice = randomInt(2);
		if (choice == 0) {
			// Add a random struct to the union
			[]
		} else if (choice == 1) {
			// Remove a random struct from the union
			[]
			
		} else {
			[]
		}
	} else if (length(module.functions) > 0) {
		[]
	} else if (length(module.globalVars) > 0) {
		[]
	} else {
		[]
	}
	iter(changed, \i -> writeModule(^(generated.modules[i])));
}

writeModule(module : FiModule) -> void {
	src = fimodule2flowsrc(module);
	ensureDirectoryExists(dirName(module.fileinfo.fullpath));
	setFileContent(module.fileinfo.fullpath, src);
	{}
}
