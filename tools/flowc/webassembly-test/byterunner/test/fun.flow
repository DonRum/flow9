import transforms;
import form/renderform;
import form/gui;

rgb(r : double, g : double, b : double) -> int{
	round(255.0 * r) * (256 * 256) + round(255.0 * g) * 256 + round(255.0 * b);
}

// http://www.cs.rit.edu/~ncs/color/t_convert.html
hsv(hue : double, s : double, v : double) -> int {
	if( s == 0.0 ) {
		// achromatic (grey)
		rgb(v,v,v);
	} else {
		h = 360.0 * hue / 60.0; // sector 0 to 5
		i = floor( h );
		f = h - i2d(i);	// factorial part of h
		p = v * ( 1.0 - s );
		q = v * ( 1.0 - s * f );
		t = v * ( 1.0 - s * ( 1.0 - f ) );
		if (i == 0) {
			rgb(v,t,p);
		} else if (i == 1) {
			rgb(q,v,p);
		} else if (i == 2) {
			rgb(p,v,t);
		} else if (i == 3) {
			rgb(p,q,v);
		} else if (i == 4) {
			rgb(t,p,v);
		} else {
			rgb(v,p,q);
		}
	}
}

// Moving lines to span triangles

P(x : ref double, dx : ref double);

Line(x1 : P, y1 : P, x2 : P, y2 : P, x3 : P, y3 : P, style : [GraphicsStyle]);

nlines = 3;

rnd() {
	random() - 0.5;
}

mspeed() {
	1.1 * rnd()
}

rndP(m : double, offset : double) {
	P(ref random() * m + offset, ref mspeed());
}

updateP(p : P, m : double) {
	x = ^(p.x);
	dx = ^(p.dx);
	newX = x + dx;
	
	p.x := if (newX < 0.0) {
		p.dx := mspeed();
		-newX;
	} else if (newX > m) {
		if (newX > 10.0 + m) {
			m;
		} else {
			p.dx := mspeed();
			2.0 * m - newX;
		}
	} else {
		newX;
	};
	x;
}

linez = {
	println("generate linez");
	generate(0, nlines, \i -> { 
		println("generate linez step: " + i2s(i));
		c1 = hsv(random() / 10.0 + 0.07, random() * 0.2 + 0.8, 1.0);
		println("generate linez A");
		c2 = hsv(random() / 10.0 + 0.6, random() * 0.2 + 0.8, 0.5);
		println("generate linez B");
		Line(
			rndP(1024.0, 0.0),
			rndP(600.0, 0.0),
			rndP(1024.0, 0.0),
			rndP(600.0, 0.0),
			rndP(1024.0, 0.0),
			rndP(600.0, 0.0),
		[
			StrokeOpacity(0.1 + 0.3 * random()),
			Stroke(c1), 
			StrokeWidth(3.0),
			Fill(c2),
			FillOpacity( 0.3 + 0.3 * random())
		]);
	});
};

getLines(awh : Behaviour<WidthHeight>) -> Form {
	Group(map(linez, \l -> {
		wh = getValue(awh);
		x1 = updateP(l.x1, wh.width);
		y1 = updateP(l.y1, wh.height);
		x2 = updateP(l.x2, wh.width);
		y2 = updateP(l.y2, wh.height);
		x3 = updateP(l.x3, wh.width);
		y3 = updateP(l.y3, wh.height);
		
		cx = (x1 + x2 + x3) / 3.0;
		cy = (y1 + y2 + y3) / 3.0;
		
		Graphics([
			MoveTo(x1,y1), 
			CubicBezierTo(x2, y2, cx, cy), 
			CubicBezierTo(x3, y3, cx, cy), 
			CubicBezierTo(x1, y1, cx, cy), 
			ClosePath()
		], l.style)
	}
	))
}

// Make an abstract painting of rectangles and circles

painting() {
	mk = \n, fn -> {
		Group(generate(0, n, \i -> {
			x = 1024.0 * random();
			y = 600.0 * random();
			fn(x,y);
		}));
	};
	
	Group([
		mk(500, \x,y -> {
			c = hsv(random() / 5.0 + 0.6, random() * 0.2 + 0.8, 0.3);
			Offset(x - 40.0, y - 40.0, Graphics(roundedRect(80.0, 80.0, 5.0), [Fill(c)]));
		}),
		mk(1000, \x,y -> {
			c = hsv(random() / 10.0 + 0.7, random() * 0.2 + 0.8, 0.8);
			Offset(x - 15.0, y - 15.0, 
				Rotate(make(rnd() * 10.0),
					Graphics(roundedRect(30.0, 30.0, 5.0), [Fill(c), FillOpacity(0.9)])
				)
			);
		}),
		Filter(const([Blur([Radius(3.0)])]),
		mk(10, \x, y-> {
			c1 = hsv(random() / 10.0 + 0.7, random() * 0.1, 1.0);
			c2 = hsv(random() / 10.0 + 0.3, random() * 0.2 + 0.8, 0.1);
			Offset(x, y, 
				Rotate(make(rnd() * 60.0),
					Group([
						Graphics(roundedRect(90.0, 40.0, 10.0), [Fill(c1), FillOpacity(0.9)]),
						Circle(15.0, 20.0, 10.0, [Fill(c2)]),
						Circle(45.0, 20.0, 10.0, [Fill(c2)]),
						Circle(75.0, 20.0, 10.0, [Fill(c2)]),
					])
				)
			)
		})
		),
		mk(500, \x,y -> {
			ca = floor(random() * 3.0);
			if (ca == 0) {
				c = hsv(random() / 10.0, random() * 0.6 + 0.4, 0.9);
				Circle(x, y, 15.0, [Fill(c), FillOpacity(0.3)]);
			} else if (ca == 1) {
				c = hsv(random() / 10.0 + 0.07, random() * 0.2 + 0.8, 1.0);
				Circle(x, y, 10.0, [Fill(c)]);
			} else {
				c = hsv(random() / 10.0 + 0.07, random() * 0.2 + 0.8, 1.0);
				Circle(x, y, 5.0, [Fill(c)]);
			}
		}),
		Filter(const([Blur([Radius(10.0)])]),
		mk(20, \x, y -> {
			c1 = hsv(random() / 10.0 + 0.6, random() * 0.8 + 0.2, 1.0);
			Group([
			Circle(x, y, 20.0, [Fill(c1), FillOpacity(0.5)]),
			Circle(x, y, 6.0, [Fill(0xffffff)])
			])
		})),
	]);
}

fit(width : double, height : double, form: Form) {
	awidth = make(0.0);
	aheight = make(0.0);

	scale = select2(awidth, aheight, \w, h -> {
		scaleX = w / width;
		scaleY = h / height;
		min(scaleX, scaleY)
	});

	Scale(scale, scale, Inspect([AvailableWidth(awidth), AvailableHeight(aheight)], form));
}

main() {
	println("FLOW 1");
	start = timestamp();
	println("FLOW 2");
	m = make(Empty());
	println("FLOW 3");
	awh = make(WidthHeight(1024.0, 600.0));
	println("FLOW 4");

	v = 1;

	g = if (v == 2) {
		println("FLOW 5a");
		tmr = repeatable(10);
		select(tmr.value, \t -> getLines(awh));
	} else if (v == 1) {
		println("FLOW 5b");
		make(getLines(awh));
	} else {
		println("FLOW 5c");
		make(painting());
	}

	println("FLOW 7");

	render(
		Inspect([IAvailable2(awh)], 
			Mutable(g)
		)
	);
	println(d2s(timestamp() - start));
}
